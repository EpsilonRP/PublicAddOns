--Items
local EpsilonLib, EpsiLib = ...;

-- Helper Func to create our tables with implicit meta override for pairs
local meta = {}
function meta.__pairs(t)
	local function iter(t, k)
		local next_key, next_value = next(t, k)
		while next_key == "_info" do
			next_key, next_value = next(t, next_key)
		end
		return next_key, next_value
	end

	return iter, t, nil
end

local function createCommandTable()
	local table = {}
	setmetatable(table, meta)
	return table
end

EpsiLib.CommandDefinitions = createCommandTable()

local commands = EpsiLib.CommandDefinitions

local inputTypes = {
	["#"] = "number",
	["$"] = "string",
	["%"] = "number",
}

---Get a type from a string based on char one, returning the type, if available, and the string back, with type char removed if it was a supported type
---@param str string
---@return string
---@return string
local function getTypeFromString(str)
	local maybeType = inputTypes[str:sub(1, 1)]
	if maybeType then str = str:sub(2) end -- strip the type character
	return maybeType, str
end

local charsToStrip = {
	["{"] = "",
	["}"] = "",
	["\\"] = "",
	["|"] = "/", -- Not technically a strip but whatever lol
}

---@class InputDef
---@field name string
---@field type string
---@field optional? boolean
---@field choices? InputDef[]

local function parseInputs(...)
	local rawInputs = { ... }
	if #rawInputs == 0 then return nil end
	-- Early Exit for no input

	local parsedInputs = {}

	local continuedOptional = 0
	for _, _rawInput in ipairs(rawInputs) do
		-- Our Final Input Holder, predefined
		local finalInput = {}

		-- Strip naughty syntax chars. Probably should do this ahead of time to save on compile time at load/run..
		_rawInput = _rawInput:gsub(".", charsToStrip)

		local openedWithOptional
		-- Check if Optional
		if _rawInput:sub(1, 1) == "[" then
			-- Flag for optional
			finalInput.optional = true
			openedWithOptional = true

			-- Strip the opening [
			_rawInput = _rawInput:sub(2)
		end

		-- Check for closing optionals
		local optionalCloseCount = 0
		while _rawInput:sub(-1) == "]" do
			-- Strip the closing
			_rawInput = _rawInput:sub(1, -2)

			-- Count the optionals we are closing to remove from the continued counter
			optionalCloseCount = optionalCloseCount + 1
		end

		-- Now we've done parsing the open & close, we can check if there was a continued optional on file, before we modify it based on this one
		if continuedOptional > 0 then
			finalInput.optional = true
		end

		if optionalCloseCount == 0 then
			-- There was no optional closing..
			if openedWithOptional then
				-- And we opened with an optional! Thus the optional must continue on!
				continuedOptional = continuedOptional + 1
			end
		else
			continuedOptional = continuedOptional - optionalCloseCount
		end

		local subChoices = {}
		local inputType
		if _rawInput:find("/") then
			local _subChoices = { strsplit("/", _rawInput) }
			inputType = "choice"
			for i = 1, #_subChoices do
				local choiceType, choiceName
				choiceType, choiceName = getTypeFromString(_subChoices[i])

				---@type InputDef
				local _subChoice = {
					type = choiceType or "literal",
					name = choiceName
				}
				subChoices[#subChoices + 1] = _subChoice
			end
		else
			-- Check for type on the full thing
			inputType, _rawInput = getTypeFromString(_rawInput)
		end

		if not inputType then inputType = "literal" end
		-- at this point, our string should be fully stripped, so add it to the final input as the name
		finalInput.name = _rawInput
		finalInput.type = inputType
		if #subChoices > 0 then
			finalInput.choices = subChoices
		end

		-- add our input to the final parsed table
		parsedInputs[#parsedInputs + 1] = finalInput --[[@as InputDef]]
	end

	return parsedInputs
end

---Parse & Add the Command to our CommandDefs table
---@param fullCommand string
---@param syntax string
---@param description string
---@param ... string
local function parseCommand(fullCommand, syntax, description, ...)
	local commandParts = { strsplit(" ", fullCommand) }
	local curCommand
	for k, v in ipairs(commandParts) do
		if k == 1 then
			-- first one, start with the base commands table
			if not commands[v] then commands[v] = createCommandTable() end
			curCommand = commands[v]
		else
			-- dig deeper
			if not curCommand[v] then curCommand[v] = createCommandTable() end
			curCommand = curCommand[v]
		end
	end

	-- Done iterating the commandParts - Now curCommand should be pointed at that final command definition to save it's data.
	if not curCommand._info then curCommand._info = {} end
	local curCommandInfo = curCommand._info
	curCommandInfo.syntax = syntax
	curCommandInfo.description = description
	curCommandInfo.full = fullCommand

	-- Now Parse Inputs & save them to the definition. Could return nil, if no inputs, leaving.. no inputs!
	local parsedInputs = parseInputs(...)
	curCommandInfo.inputs = parsedInputs
end

-- Example...
--parseCommand("forge item set name", "", "", "$link", "$name")
-- creates commands['forge']['item']['set']['name']._info.full = "forge item set name" for instance..
-- aka:    commands.forge.item.set.name._info.full

--Undocumented Annotation here ;) disables formatting on the next block
---@format disable-next
local function runDefs()
	parseCommand("achievement", [==[Syntax: .achievement $subcommand]==], [==[Type .achievement to see the list of possible subcommands or .help achievement $subcommand to see info on subcommands]==], nil)
	parseCommand("achievement add", [==[Syntax: .achievement add $achievement]==], [==[Add an achievement to the targeted player. $achievement: can be either achievement id or achievement link]==], [==[$achievement]==])
	parseCommand("additem", [==[Syntax: .additem #itemid/[#itemname]/#shift-click-item-link #itemcount #bonusListIDs]==], [==[Adds the specified number of items of id #itemid (or exact (!) name $itemname in brackets]==], [==[#itemid/[#itemname]/#shift-click-item-link]==],[==[#itemcount]==],[==[#bonusListIDs]==])
	parseCommand("additemset", [==[Syntax: .additemset #itemsetid #bonusListIDs]==], [==[Add items from itemset of id #itemsetid to your or selected character inventory. Will add by one example each item from itemset. If the itemset has multiple levels it adds one of each item level. #bonusListIDs is a semicolon separated list of bonuses to add to all items (such as Mythic/Heroic/Warforged/socket)]==], [==[#itemsetid]==],[==[#bonusListIDs]==])
	parseCommand("announce", [==[Syntax: .announce $MessageToBroadcast]==], [==[Send a global message to all players online in chat log.]==], [==[$MessageToBroadcast]==])
	parseCommand("appear", [==[Syntax: .appear [$charactername]]==], [==[Teleport to the given character. If no character name is given, defaults to your current player target, if you have one.]==], [==[[$charactername]]==])
	parseCommand("aura", [==[Syntax: .aura #spellid [self]]==], [==[Add the aura from spell #spellid to the selected Unit.]==], [==[#spellid]==],[==[[self]]==])
	parseCommand("cast", [==[Syntax: .cast #spellid [triggered] [self]]==], [==[Cast #spellid to selected target. If no target selected cast to self. If 'trigered' or part provided then spell casted with triggered flag.]==], [==[#spellid]==],[==[[triggered]]==],[==[[self]]==])
	parseCommand("cast back", [==[Syntax: .cast back #spellid [triggered]]==], [==[Selected target will cast #spellid to your character. If 'trigered' or part provided then spell casted with triggered flag.]==], [==[#spellid]==],[==[[triggered]]==])
	parseCommand("cast dest", [==[Syntax: .cast dest #spellid #x #y #z [triggered]]==], [==[Selected target will cast #spellid at provided destination. If 'trigered' or part provided then spell casted with triggered flag.]==], [==[#spellid]==],[==[#x]==],[==[#y]==],[==[#z]==],[==[[triggered]]==])
	parseCommand("cast dist", [==[Syntax: .cast dist #spellid [#dist [triggered]]]==], [==[You will cast spell to pint at distance #dist. If 'trigered' or part provided then spell casted with triggered flag. Not all spells can be casted as area spells.]==], [==[#spellid]==],[==[[#dist]==],[==[[triggered]]]==])
	parseCommand("cast self", [==[Syntax: .cast self #spellid [triggered]]==], [==[Cast #spellid by target at target itself. If 'trigered' or part provided then spell casted with triggered flag.]==], [==[#spellid]==],[==[[triggered]]==])
	parseCommand("character", [==[Syntax: character $subcommand]==], [==[Type .character to see a list of possible subcommands, or .help character $subcommand to see info on the subcommand.]==], [==[character]==],[==[$subcommand]==])
	parseCommand("character changefaction", [==[Syntax: .character changefaction]==], [==[Flags you for a faction change, available at character select.]==], nil)
	parseCommand("character changerace", [==[Syntax: .character changerace]==], [==[Flags you for a race change, available at character select.]==], nil)
	parseCommand("character customize", [==[Syntax: .character customize [$name]]==], [==[Mark selected in game or by $name in command character for customize at next login.]==], [==[[$name]]==])
	parseCommand("cheat", [==[Syntax: .cheat $subcommand]==], [==[Type .cheat to see the list of possible subcommands or .help cheat $subcommand to see info on subcommands]==], [==[$subcommand]==])
	parseCommand("cheat bank", [==[Syntax: .cheat bank]==], [==[Shows you your bank.]==], nil)
	parseCommand("cheat barber", [==[Syntax: .cheat barber]==], [==[Opens the barbershop instantly, allowing you to customize your character. Make sure you're fashionable!]==], nil)
	parseCommand("cheat casttime", [==[Syntax: .cheat casttime [on/off]]==], [==[Enables or disables your character's spell cast times.]==], [==[[on/off]]==])
	parseCommand("cheat cooldown", [==[Syntax: .cheat cooldown [on/off]]==], [==[Enables or disables your character's spell cooldowns.]==], [==[[on/off]]==])
	parseCommand("cheat duration", [==[Syntax: .cheat duration [on/off]]==], [==[All spells cast by the player will have infinite duration.]==], [==[[on/off]]==])
	parseCommand("cheat fly", [==[Syntax: .cheat fly [on/off]]==], [==[Enable/disable gm fly mode.]==], [==[[on/off]]==])
	parseCommand("cheat god", [==[Syntax: .cheat god [on/off]]==], [==[Enables or disables your character's ability to take damage.]==], [==[[on/off]]==])
	parseCommand("cheat mailbox", [==[Syntax: .cheat mailbox]==], [==[Show your mailbox content.]==], nil)
	parseCommand("cheat power", [==[Syntax: .cheat power [on/off]]==], [==[Enables or disables your character's spell cost (e.g mana).]==], [==[[on/off]]==])
	parseCommand("cheat repair", [==[Syntax: .cheat repair]==], [==[Repair all selected player's items.]==], nil)
	parseCommand("cheat status", [==[Syntax: .cheat status]==], [==[Shows the cheats you currently have enabled.]==], nil)
	parseCommand("cheat tabard", [==[Syntax: .cheat tabard]==], [==[Opens the tabard designer. Must be a Guild Master..]==], nil)
	parseCommand("cheat taxi", [==[Syntax: .cheat taxi on/off]==], [==[Temporary grant access or remove to all taxi routes for the selected character. If no character is selected]==], [==[on/off]==])
	parseCommand("cheat waterwalk", [==[Syntax: .cheat waterwalk on/off]==], [==[Set on/off waterwalk state for selected player or self if no player selected.]==], [==[on/off]==])
	parseCommand("combatstop", [==[Syntax: .combatstop [$playername]]==], [==[Stop combat for selected character. If selected non-player then command applied to self. If $playername provided then attempt applied to online player $playername.]==], [==[[$playername]]==])
	parseCommand("commands", [==[Syntax: .commands]==], [==[Display a list of available commands for your account level.]==], nil)
	parseCommand("cooldown", [==[Syntax: .cooldown [#spell_id]]==], [==[Remove all (if spell_id not provided) or #spel_id spell cooldown from selected character or their pet or you (if no selection).]==], [==[[#spell_id]]==])
	parseCommand("damage", [==[Syntax: .damage $damage_amount [$school [$spellid]]]==], [==[Apply $damage to target. If not $school and $spellid provided then this flat clean melee damage without any modifiers. If $school provided then damage modified by armor reduction (if school physical)]==], [==[$damage_amount]==],[==[[$school]==],[==[[$spellid]]]==])
	parseCommand("demorph", [==[Syntax: .demorph [self]]==], [==[Demorph the selected player.]==], [==[[self]]==])
	parseCommand("dismount", [==[Syntax: .dismount]==], [==[Dismount you]==], nil)
	parseCommand("distance", [==[Syntax: .distance]==], [==[Display the distance from your character to the selected creature.]==], nil)
	parseCommand("doodad", [==[]==], [==[]==], nil)
	parseCommand("doodad mass", [==[]==], [==[]==], nil)
	parseCommand("doodad mass import", [==[Syntax: .doodad mass import #radius]==], [==[Imports all doodads within #radius of your character. Only imports doodads that are not currently imported]==], [==[#radius]==])
	parseCommand("doodad mass unimport", [==[Syntax: .doodad mass unimport #radius]==], [==[Unimports all doodads within #radius of your character. Functions similar to .gobject mass delete]==], [==[#radius]==])
	parseCommand("doodad near", [==[Syntax: .doodad near #range]==], [==[Prints all doodads within range]==], [==[#range]==])
	parseCommand("doodad select", [==[Syntax: .doodad select [#entry]]==], [==[Selects the nearest Doodad.]==], [==[[#entry]]==])
	parseCommand("enchant", [==[]==], [==[Enchant either a mainhand or an offhand. Use .lookup enchant to find an ID.]==], nil)
	parseCommand("enchant mainhand", [==[Syntax: .enchant mainhand #enchant_id]==], [==[Enchants your mainhand with a specific enchantment. Use .lookup enchant to find an ID.]==], [==[#enchant_id]==])
	parseCommand("enchant offhand", [==[Syntax: .enchant offhand #enchant_id]==], [==[Enchants your equipped offhand item with a specific enchantment. Use .lookup enchant to find an ID.]==], [==[#enchant_id]==])
	parseCommand("enchant ranged", [==[Syntax: .enchant ranged #enchant_id]==], [==[Enchants your equipped ranged item with a specific enchantment. Use .lookup enchant to find an ID.]==], [==[#enchant_id]==])
	parseCommand("epsilon", [==[]==], [==[]==], nil)
	parseCommand("epsilon displayname", [==[Syntax: .epsilon displayname $name]==], [==[Your desired display name. Follows the same limitation as a character naming scheme]==], [==[$name]==])
	parseCommand("eventannounce", [==[Syntax: .eventannounce $BroadcastMessage]==], [==[Sends a message to all players in the Event Announcement channel. All messages in this channel must be on-topic!]==], [==[$BroadcastMessage]==])
	parseCommand("gobject", [==[Syntax: .gobject $subcommand]==], [==[Type .gobject to see the list of possible subcommands or .help gobject $subcommand to see info on subcommands]==], [==[$subcommand]==])
	parseCommand("gobject activate", [==[Syntax: .gobject activate [#guid [$permanent]]]==], [==[Activates the selected gobject like a door or a button. Accepts an optional #guid. Accepts "permanent" as an argument to make the activation persist through restarts.]==], [==[[#guid]==],[==[[$permanent]]]==])
	parseCommand("gobject anim", [==[Syntax: .gobject anim #animid]==], [==[Sets the selected gameobject to play the specified animation. Common #animids are:, 0 - Stand, 145 - Spawn, 146 - Close, 147 - Closed, 148 - Open, 149 - Opened, 150 - Destroy, 157 - Despawn, Most door objects use 146-149.]==], [==[#animid]==])
	parseCommand("gobject blueprint", [==[Syntax: .gobject blueprint command]==], [==[Allows the saving]==], [==[command]==])
	parseCommand("gobject blueprint delete", [==[Syntax: .gobject blueprint delete $name]==], [==[Deletes the blueprint with $name. A copy is kept for backup purposes.]==], [==[$name]==])
	parseCommand("gobject blueprint Sets a description for the blueprint with $name.", [==[Syntax: .gobject blueprint Sets a description for the blueprint with $name. $name $Sets a description for the blueprint with $name.]==], [==[Sets a description for the blueprint with $name.]==], [==[$name]==],[==[$description]==])
	parseCommand("gobject blueprint import", [==[Syntax: .gobject blueprint import $name/$id]==], [==[Imports the blueprint $name (or $id if there are duplicate names) into your blueprint library.]==], [==[$name/$id]==])
	parseCommand("gobject blueprint info", [==[Syntax: .gobject blueprint info $name]==], [==[Outputs information about the blueprint with $name: name]==], [==[$name]==])
	parseCommand("gobject blueprint new", [==[Syntax: .gobject blueprint new $name]==], [==[Creates a new blueprint with $name using your selected gameobject group.]==], [==[$name]==])
	parseCommand("gobject blueprint reject", [==[Syntax: .gobject blueprint reject $name/$id]==], [==[Removes the blueprint $name (or $id if there are duplicate names) from your blueprint library.]==], [==[$name/$id]==])
	parseCommand("gobject blueprint rename", [==[Syntax: .gobject blueprint rename $name $name2]==], [==[Renames the blueprint with $name to $name2.]==], [==[$name]==],[==[$name2]==])
	parseCommand("gobject blueprint share", [==[Syntax: .gobject blueprint share $name $player]==], [==[Shares the blueprint $name in its current state with $player.]==], [==[$name]==],[==[$player]==])
	parseCommand("gobject blueprint spawn", [==[Syntax: .gobject blueprint spawn $name]==], [==[Spawns the blueprint with $name at your location and orientation.]==], [==[$name]==])
	parseCommand("gobject blueprint update", [==[Syntax: .gobject blueprint update $name]==], [==[Updates an existing blueprint with $name using your selected gameobject group.]==], [==[$name]==])
	parseCommand("gobject blueprint delist", [==[Syntax: .gobject blueprint delist $name/$id]==], [==[Removes the blueprint $name (or $id if there are duplicate names) from the public list. Only works if you own it.]==], [==[$name/$id]==])
	parseCommand("gobject copy", [==[Syntax: .gobject copy $direction #value [#count] [#entry]]==], [==[Copy the selected object towards $direction #value. #count will determine how many times to repeat the operation. #entry controls the new object's template. e.g. .gobject copy r 4 will copy your selected object]==], [==[$direction]==],[==[#value]==],[==[[#count]]==],[==[[#entry]]==])
	parseCommand("gobject delete", [==[Syntax: .gobject delete #guid]==], [==[Delete your selected gameobject or gameobject with GUID given.]==], [==[#guid]==])
	parseCommand("gobject face", [==[Syntax: .gobject face {$north/east/south/west|#direction}]==], [==[]==], [==[{$north/east/south/west|#direction}]==])
	parseCommand("gobject go", [==[Syntax: .gobject go [#guid]]==], [==[Teleport your character to selected gameobject or gameobject with GUID given.]==], [==[[#guid]]==])
	parseCommand("gobject group", [==[]==], [==[Allows manipulation of multiple objects grouped together.]==], nil)
	parseCommand("gobject group add", [==[Syntax: .gobject group add #guid]==], [==[Adds your selected object to the gameobject group of #guid. Example: ".gobject group add 9487480" will assign your selected object to the gameobject group of object 9487480.]==], [==[#guid]==])
	parseCommand("gobject group addbox", [==[Syntax: .gobject group addbox [#z]]==], [==[Adds all objects contained within a box drawn by coordinates from ".pos1" and ".pos2" to your selected object's gameobject group.]==], [==[[#z]]==])
	parseCommand("gobject group addnear", [==[Syntax: .gobject group addnear #distance]==], [==[Adds all objects within #distance (yards) to your selected object's gameobject group.]==], [==[#distance]==])
	parseCommand("gobject group clear", [==[Syntax: .gobject group clear]==], [==[Clears the entire gameobject group assigned to your selected object.]==], nil)
	parseCommand("gobject group copy", [==[Syntax: .gobject group copy $direction #value]==], [==[Copy the selected gameobject group towards $direction by #value (yards). The new gameobject group will automatically be selected.]==], [==[$direction]==],[==[#value]==])
	parseCommand("gobject group delete", [==[Syntax: .gobject group delete]==], [==[Deletes all objects belonging to the gameobject group of your selected object.]==], nil)
	parseCommand("gobject group deselect", [==[Syntax: .gobject group deselect]==], [==[Deselect the gameobject group of your selected object.]==], nil)
	parseCommand("gobject group go", [==[Syntax: .gobject group go [#id]]==], [==[Teleports you to the leader of the gameobject group selected.]==], [==[[#id]]==])
	parseCommand("gobject group info", [==[Syntax: .gobject group info]==], [==[Outputs information about the gameobject group your selected object is part of.]==], nil)
	parseCommand("gobject group move", [==[Syntax: .gobject group move [$direction #value]]==], [==[Moves the gameobject group towards $direction by #value (yards) relative to its orientation. If no parameters are specified]==], [==[[$direction]==],[==[#value]]==])
	parseCommand("gobject group move backwards", [==[Syntax: .gobject group move backwards #distance]==], [==[Moves the object group backwards %float units.]==], [==[#distance]==])
	parseCommand("gobject group move downwards", [==[Syntax: .gobject group move downwards #distance]==], [==[Moves the object group downwards %float units.]==], [==[#distance]==])
	parseCommand("gobject group move forwards", [==[Syntax: .gobject group move forwards #distance]==], [==[Moves the object group forward %float units.]==], [==[#distance]==])
	parseCommand("gobject group move left", [==[Syntax: .gobject group move left #distance]==], [==[Moves the object group left %float units.]==], [==[#distance]==])
	parseCommand("gobject group move right", [==[Syntax: .gobject group move right #distance]==], [==[Moves the object group right %float units.]==], [==[#distance]==])
	parseCommand("gobject group move upwards", [==[Syntax: .gobject group move upwards #distance]==], [==[Moves the object group upwards %float units.]==], [==[#distance]==])
	parseCommand("gobject group promote", [==[Syntax: .gobject group promote]==], [==[Promotes your selected object to leader of the gameobject group it is in.]==], nil)
	parseCommand("gobject group relative", [==[Syntax: .gobject group relative [$direction #value]]==], [==[Moves the object group towards $direction by #value (yards) relative to your character's orientation]==], [==[[$direction]==],[==[#value]]==])
	parseCommand("gobject group relative backwards", [==[Syntax: .gobject group relative backwards #distance]==], [==[Moves the object group backwards %float units relative to your character.]==], [==[#distance]==])
	parseCommand("gobject group relative downwards", [==[Syntax: .gobject group relative downwards #distance]==], [==[Moves the object group downwards %float units relative to your character.]==], [==[#distance]==])
	parseCommand("gobject group relative forwards", [==[Syntax: .gobject group relative forwards #distance]==], [==[Moves the object group forward %float units relative to your character.]==], [==[#distance]==])
	parseCommand("gobject group relative left", [==[Syntax: .gobject group relative left #distance]==], [==[Moves the object group left %float units relative to your character.]==], [==[#distance]==])
	parseCommand("gobject group relative right", [==[Syntax: .gobject group relative right #distance]==], [==[Moves the object group right %float units relative to your character.]==], [==[#distance]==])
	parseCommand("gobject group relative upwards", [==[Syntax: .gobject group relative upwards #distance]==], [==[Moves the object group upwards %float units relative to your character.]==], [==[#distance]==])
	parseCommand("gobject group remove", [==[Syntax: .gobject group remove]==], [==[Removes the selected gameobject from the group it is in.]==], nil)
	parseCommand("gobject group scale", [==[Syntax: .gobject group scale #value]==], [==[Scales the selected gameobject group by #value relative to the gameobject leader's scale.]==], [==[#value]==])
	parseCommand("gobject group select", [==[Syntax: .gobject group select]==], [==[Select the group leader of the gameobject group belonging to your selected object. Most group commands require a selected gameobject group.]==], nil)
	parseCommand("gobject group turn", [==[Syntax: .gobject group turn #value]==], [==[Rotates the selected gameobject group by #value (degrees).]==], [==[#value]==])
	parseCommand("gobject group zcopy", [==[Syntax: .gobject group zcopy $direction #value]==], [==[Copy the selected gameobject group towards $direction by #value (yards). The new gameobject group will automatically be selected. Additionally]==], [==[$direction]==],[==[#value]==])
	parseCommand("gobject info", [==[Syntax: .gobject info [#guid/entry]]==], [==[Query Gameobject information for selected gameobject or given GameObject entry/guid.]==], [==[[#guid/entry]]==])
	parseCommand("gobject mass", [==[]==], [==[]==], nil)
	parseCommand("gobject mass delete", [==[Syntax: .gobject mass delete #radius #entry]==], [==[Deletes all objects of entry matching #entry within #radius yards of your position. Max #radius of 500. If #radius is -1]==], [==[#radius]==],[==[#entry]==])
	parseCommand("gobject mass replace", [==[Syntax: .gobject mass replace #search #replace #radius]==], [==[Replaces all gobjects matching entry #search with entry #replace within #range of your character's position.]==], [==[#search]==],[==[#replace]==],[==[#radius]==])
	parseCommand("gobject mass visibility", [==[Syntax: .gobject mass visibility #sight_range #entry #radius]==], [==[Sets the gobject to only be visible from #sight_range yards away. Max 533. Insert -1 to force a 'permanent' visibility of 3000. Applies this to every object within #radius yards matching the entry ID #entry. Accepts -1 for #radius to apply on all objects within the map]==], [==[#sight_range]==],[==[#entry]==],[==[#radius]==])
	parseCommand("gobject move", [==[Syntax: .gobject move [#guid]]==], [==[Moves selected gameobject]==], [==[[#guid]]==])
	parseCommand("gobject move backwards", [==[.Syntax: gobject move backwards #num]==], [==[Moves the object backwards %float units.]==], [==[#number]==])
	parseCommand("gobject move downwards", [==[Syntax: .gobject move downwards #num]==], [==[Moves the object downwards %float units.]==], [==[#number]==])
	parseCommand("gobject move forwards", [==[Syntax: .gobject move forwards #num]==], [==[Moves the object forward %float units.]==], [==[#number]==])
	parseCommand("gobject move left", [==[Syntax: .gobject move left #num]==], [==[Moves the object left %float units.]==], [==[#number]==])
	parseCommand("gobject move right", [==[Syntax: .gobject move right #num]==], [==[Moves the object right %float units.]==], [==[#number]==])
	parseCommand("gobject move upwards", [==[Syntax: .gobject move upwards #num]==], [==[Moves the object upwards %float units.]==], [==[#number]==])
	parseCommand("gobject near", [==[Syntax: .gobject near [#distance]]==], [==[Output gameobjects at distance #distance from player. Output gameobject guids and coordinates sorted by distance from character. If #distance not provided use 10 as default value.]==], [==[[#distance]]==])
	parseCommand("gobject pitch", [==[Syntax: .gobject pitch #rotation]==], [==[Sets the pitch (Y) of the selected object to #rotation.]==], [==[#rotation]==])
	parseCommand("gobject relative", [==[]==], [==[Moves a gameobject relative to your orientation in $direction by %yards.]==], nil)
	parseCommand("gobject relative backwards", [==[Syntax: gobject relative backwards #num]==], [==[Moves the object backwards %float units relative to your character.]==], [==[#number]==])
	parseCommand("gobject relative downwards", [==[Syntax: .gobject relative downwards #num]==], [==[Moves the object downwards %float units relative to your character.]==], [==[#number]==])
	parseCommand("gobject relative forwards", [==[Syntax: .gobject relative forwards #num]==], [==[Moves the object forward %float units relative to your character.]==], [==[#number]==])
	parseCommand("gobject relative left", [==[Syntax: .gobject relative left #num]==], [==[Moves the object left %float units relative to your character.]==], [==[#number]==])
	parseCommand("gobject relative right", [==[Syntax: .gobject relative right #num]==], [==[Moves the object right %float units relative to your character.]==], [==[#number]==])
	parseCommand("gobject relative upwards", [==[Syntax: .gobject relative upwards #num]==], [==[Moves the object upwards %float units relative to your character.]==], [==[#number]==])
	parseCommand("gobject replace", [==[Syntax: .gobject replace $entry]==], [==[Replaces the selected gobject with another gobject with specified $entry.]==], [==[$entry]==])
	parseCommand("gobject roll", [==[Syntax: .gobject roll #rotation]==], [==[Sets the roll (X) of the selected object to #rotation.]==], [==[#rotation]==])
	parseCommand("gobject rotate", [==[Syntax: .gobject rotate #roll #pitch #rotation]==], [==[Rotate the world rotation angles X]==], [==[#roll]==],[==[#pitch]==],[==[#rotation]==])
	parseCommand("gobject scale", [==[Syntax: .gobject set scale #scale]==], [==[Sets the scale of #guid or selected object to #scale. Max scale 50. No lower or equal to 0.]==], [==[#scale]==])
	parseCommand("gobject select", [==[Syntax: .gobject select [#go_id|"$go_name_part"]]==], [==[Locate and show position nearest gameobject. If #go_id or "$go_name_part" is provided then locate and show position of nearest gameobject with gameobject template id #go_id or "$go_name_part" as part of the object's name.]==], [==[[#go_id|"$go_name_part"]]==])
	parseCommand("gobject set", [==[]==], [==[]==], nil)
	parseCommand("gobject set state", [==[Syntax: .gobject set state [#guid] #type #state]==], [==[Set the #type and #state of a gameobject with DB guid #guid.]==], [==[[#guid]]==],[==[#type]==],[==[#state]==])
	parseCommand("gobject set visibility", [==[Syntax: .gobject set visibility #sight_range]==], [==[Sets the gobject to only be visible from #sight_range yards away. Max 533. Insert -1 to force a 'permanent' visibility of 3000.]==], [==[#sight_range]==])
	parseCommand("gobject spawn", [==[Syntax: .gobject spawn #id]==], [==[Add a game object from game object templates to the world at your current location using the #id. You can append other gobject commands after the #id to apply that change onto the object immediately]==], [==[#id]==])
	parseCommand("gobject spell", [==[Syntax: .gobject spell #spell]==], [==[Accepts spell links. Sets the gameobject to constantly have the effect of the given spell on them.]==], [==[#spell]==])
	parseCommand("gobject teleporter", [==[]==], [==[]==], nil)
	parseCommand("gobject teleporter add", [==[Syntax: .gobject teleporter add [#guid[@#phase]] [#icon "$text"] [#x #y #z] [#o]]==], [==[Adds a teleport location to the teleporter]==], [==[[#guid[@#phase]]]==],[==[[#icon]==],[==["$text"]]==],[==[[#x]==],[==[#y]==],[==[#z]]==],[==[[#o]]==])
	parseCommand("gobject teleporter clear", [==[Syntax: .gobject teleporter clear [#guid]]==], [==[Wipes all teleport locations and settings from the selected Epsilon Teleporter or #guid.]==], [==[[#guid]]==])
	parseCommand("gobject teleporter delay", [==[Syntax: .gobject teleporter delay [#miliseconds]]==], [==[Between the moment the player steps on the teleporter and the moment they're teleported there will be a delay the length of #miliseconds. Max: 5000 miliseconds.]==], [==[[#miliseconds]]==])
	parseCommand("gobject teleporter off", [==[Syntax: .gobject teleporter off [#guid]]==], [==[Disables the selected object or #guid from issuing teleports.]==], [==[[#guid]]==])
	parseCommand("gobject teleporter on", [==[Syntax: .gobject teleporter on]==], [==[Sets the selected object as an Epsilon Teleporter.]==], nil)
	parseCommand("gobject teleporter remove", [==[Syntax: .gobject teleporter remove #id]==], [==[Removes teleport #id from the selected teleporter. To see all teleport #id of the teleporter]==], [==[#id]==])
	parseCommand("gobject teleporter setactive", [==[Syntax: .gobject teleporter setactive]==], [==[The teleporter will do .gobject activate on itself on teleport. It will reset after the delay or 1 second.]==], nil)
	parseCommand("gobject teleporter setphase", [==[Syntax: .gobject teleporter phase [#phaseid]]==], [==[Changes the phase of the player to #phaseid on teleport.]==], [==[[#phaseid]]==])
	parseCommand("gobject teleporter setrange", [==[Syntax: .gobject teleporter setrange [#phaseid]]==], [==[Changes the range of the Epsilon Teleporter to #range. Values from Max range of 10.0]==], [==[[#phaseid]]==])
	parseCommand("gobject teleporter setspell", [==[Syntax: .gobject teleporter setspell #spellid/0]==], [==[The teleporter will cast #spellid on the player on teleport. If 0 is given]==], [==[#spellid/0]==])
	parseCommand("gobject teleporter unaura", [==[Syntax: .gobject teleporter unaura #spellid]==], [==[Removes #spellid from player when they enter into range of the teleporter.]==], [==[#spellid]==])
	parseCommand("gobject tilt", [==[Syntax: .gobject tilt #rotation]==], [==[Sets the pitch of the selected object to #rotation in the player's direction. The result is a pitch]==], [==[#rotation]==])
	parseCommand("gobject turn", [==[Syntax: .gobject turn #rotation]==], [==[Sets the rotation (Z) of the selected object to #rotation.]==], [==[#rotation]==])
	parseCommand("gobject unselect", [==[Syntax: .gobject unselect]==], [==[Deselects the currently highlighted object.]==], nil)
	parseCommand("gobject zcopy", [==[Syntax: .gobject zcopy [id] $direction #value]==], [==[Copy the selected object towards $direction #value]==], [==[[id]]==],[==[$direction]==],[==[#value]==])
	parseCommand("gps", [==[Syntax: .gps [$name|$shift-link]]==], [==[Display the position information for a selected character or creature (also if player name $name provided then for named player]==], [==[[$name|$shift-link]]==])
	parseCommand("gps backwards", [==[Syntax: .gps backwards #num]==], [==[Warps you backwards %float units.]==], [==[#number]==])
	parseCommand("gps downwards", [==[Syntax: .gps downwards #num]==], [==[Warps you downwards %float units.]==], [==[#number]==])
	parseCommand("gps face", [==[Syntax: .gps face $direction/#orientation]==], [==[Faces north/east/west/south]==], [==[$direction/#orientation]==])
	parseCommand("gps forwards", [==[Syntax: .gps forwards #num]==], [==[Warps you forward %float units.]==], [==[#number]==])
	parseCommand("gps graveyard", [==[Syntax: .gps graveyard #graveyardId]==], [==[Teleport to graveyard with the graveyardId specified.]==], [==[#graveyardId]==])
	parseCommand("gps grid", [==[Syntax: .gps grid #gridX #gridY [#mapId]]==], [==[Teleport the gm to center of grid with provided indexes at map #mapId (or current map if it not provided).]==], [==[#gridX]==],[==[#gridY]==],[==[[#mapId]]==])
	parseCommand("gps left", [==[Syntax: .gps left #num]==], [==[Warps you left %float units.]==], [==[#number]==])
	parseCommand("gps right", [==[Syntax: .gps right #num]==], [==[Warps you right %float units.]==], [==[#number]==])
	parseCommand("gps taxinode", [==[Syntax: .gps taxinode #taxinode]==], [==[Teleport player to taxinode coordinates. You can look up zone using .lookup taxinode $namepart]==], [==[#taxinode]==])
	parseCommand("gps trigger", [==[Syntax: .gps trigger #trigger_id]==], [==[Teleport your character to areatrigger with id #trigger_id. Character will be teleported to trigger target if selected areatrigger is telporting trigger.]==], [==[#trigger_id]==])
	parseCommand("gps turn", [==[Syntax: .gps turn#num]==], [==[Warps your orientation %float units to the left. Negative value for right.]==], [==[#number]==])
	parseCommand("gps upwards", [==[Syntax: .gps upwards #num]==], [==[Warps you upwards %float units.]==], [==[#number]==])
	parseCommand("group", [==[]==], [==[Type .group to see the list of possible subcommands or .help group $subcommand to see info on subcommands]==], nil)
	parseCommand("group aura", [==[Syntax: .group aura #spellid]==], [==[Adds an aura to all party or raid members. You must be the party leader]==], [==[#spellid]==])
	parseCommand("group unaura", [==[Syntax: .group unaura #spellid]==], [==[Removes an aura from all party or raid members. You must be the party leader]==], [==[#spellid]==])
	parseCommand("guild", [==[]==], [==[Type .guild to see the list of possible subcommands or .help guild $subcommand to see info on subcommands]==], nil)
	parseCommand("guild create", [==[Syntax: .guild create "$GuildName"]==], [==[Create a guild named $GuildName. $GuildName must be in quotes.]==], [==["$GuildName"]==])
	parseCommand("guild rename", [==[Syntax: .guild rename "$NewGuildName"]==], [==[Renames the guild you are in & a leader of with $NewGuildName. The new name must be in quotes.]==], [==["$NewGuildName"]==])
	parseCommand("guildannounce", [==[Syntax: .guildannounce $BroadcastMessage]==], [==[Sends a message to all players in the Guild Announcement channel. All messages in this channel must be on-topic!]==], [==[$BroadcastMessage]==])
	parseCommand("help", [==[Syntax: .help [$command]]==], [==[Display usage instructions for the given $command. If no $command provided show list available commands.]==], [==[[$command]]==])
	parseCommand("honor", [==[]==], [==[Type .honor to see the list of possible subcommands or .help honor $subcommand to see info on subcommands]==], nil)
	parseCommand("honor add", [==[Syntax: .honor add $amount]==], [==[Add a certain amount of honor (gained today) to the selected player.]==], [==[$amount]==])
	parseCommand("honor add kill", [==[Syntax: .honor add kill]==], [==[Add the targeted unit as one of your pvp kills today (you only get honor if it's a racial leader or a player)]==], nil)
	parseCommand("honor update", [==[Syntax: .honor update]==], [==[Force the yesterday's honor fields to be updated with today's data]==], nil)
	parseCommand("info", [==[Syntax: .info]==], [==[Shows basic server stats.]==], nil)
	parseCommand("kill", [==[Syntax: .kill]==], [==[Kill the selected player. If no player is selected]==], nil)
	parseCommand("learn", [==[Syntax: .learn #spell]==], [==[Selected character learn a spell of id #spell.]==], [==[#spell]==])
	parseCommand("learn all", [==[]==], [==[]==], nil)
	parseCommand("learn all crafts", [==[Syntax: .learn crafts]==], [==[Learn all professions and recipes.]==], nil)
	parseCommand("learn all default", [==[Syntax: .learn all default [$playername]]==], [==[Learn for selected/$playername player all default spells for his race/class and spells rewarded by completed quests.]==], [==[[$playername]]==])
	parseCommand("learn all gm", [==[Syntax: .learn all gm]==], [==[Learn all default spells for Game Masters.]==], nil)
	parseCommand("learn all my", [==[]==], [==[]==], nil)
	parseCommand("learn all my class", [==[Syntax: .learn all my class]==], [==[Learn all spells and talents available for his class.]==], nil)
	parseCommand("learn all my pettalents", [==[Syntax: .learn all my pettalents]==], [==[Learn all talents for your pet available for his creature type (only for hunter pets).]==], nil)
	parseCommand("learn all my spells", [==[Syntax: .learn all my spells]==], [==[Learn all spells (except talents and spells with first rank learned as talent) available for his class.]==], nil)
	parseCommand("learn all my talents", [==[Syntax: .learn all my talents]==], [==[Learn all talents (and spells with first rank learned as talent) available for his class.]==], nil)
	parseCommand("learn all recipes", [==[Syntax: .learn all recipes [$profession]]==], [==[Learns all recipes of specified profession and sets skill level to max.Example: .learn all recipes enchanting]==], [==[[$profession]]==])
	parseCommand("lookup", [==[]==], [==[Type .lookup to see the list of possible subcommands or .help lookup $subcommand to see info on subcommands]==], nil)
	parseCommand("lookup area", [==[Syntax: .lookup area $namepart]==], [==[Looks up an area by $namepart]==], [==[$namepart]==])
	parseCommand("lookup blueprint", [==[Syntax: .lookup blueprint [$name]]==], [==[Lists all blueprints in your library. Leaving [$name] blank will list all of your blueprints.]==], [==[[$name]]==])
	parseCommand("lookup blueprintimport", [==[Syntax: .lookup blueprintimport [$name]]==], [==[Lists all blueprints that can be imported. Leaving [$name] blank will list all importable blueprints.]==], [==[[$name]]==])
	parseCommand("lookup creature", [==[Syntax: .lookup creature $namepart]==], [==[Looks up a creature by $namepart]==], [==[$namepart]==])
	parseCommand("lookup displayid", [==[]==], [==[Allows you to find a displayid via a filename or path.]==], nil)
	parseCommand("lookup displayid creature", [==[Syntax: .lookup displayid creature $part]==], [==[Fetches creature displayids with file paths containing $part.]==], [==[$part]==])
	parseCommand("lookup displayid item", [==[Syntax: .lookup displayid item $part]==], [==[Fetches item displayids with file paths containing $part.]==], [==[$part]==])
	parseCommand("lookup displayid object", [==[Syntax: .lookup displayid object $part]==], [==[Fetches object displayids with file paths containing $part.]==], [==[$part]==])
	parseCommand("lookup emote", [==[Syntax: .lookup emote $part]==], [==[Fetches emotes with reference name containing $part.]==], [==[$part]==])
	parseCommand("lookup enchant", [==[Syntax: .lookup enchant $name]==], [==[Searches for an enchant containing the text $name. Does not support multiarguments.]==], [==[$name]==])
	parseCommand("lookup faction", [==[Syntax: .lookup faction $name]==], [==[Attempts to find the ID of the faction with the provided $name.]==], [==[$name]==])
	parseCommand("lookup item", [==[Syntax: .lookup item $item_part1 ...]==], [==[Looks up an item containing the word provided in $item_part. You may use as many lookup strings as you wish in any order (e.g. ".lookup item vrykul -bow of" will find you all items of slot bow with the words "vrykul" and "of" in them). You may provide an inventory slot name to limit the search to a specific inventory slot. They must all be prefixed with a dash ("-"). Accepted inventory slots:, head | neck | shoulder | shirt | chest | waist | legs | feet | wrists | hands | finger | trinket | weapon | shield | bow | back | two-handed | bag | tabard | robe | main-hand | off-hand | tome | ammo | thrown | gun | relic]==], [==[$item_part1]==],[==[...]==])
	parseCommand("lookup itemset", [==[Syntax: .lookup itemset $itemname]==], [==[Looks up an item set by $itemname]==], [==[$itemname]==])
	parseCommand("lookup map", [==[Syntax: .lookup map $namepart]==], [==[Looks up a map by $namepart]==], [==[$namepart]==])
	parseCommand("lookup next", [==[Syntax: .lookup next]==], [==[View the next 50 results of the last thing you looked up.]==], nil)
	parseCommand("lookup object", [==[Syntax: .lookup object $objname]==], [==[Looks up an gameobject by $objname]==], [==[$objname]==])
	parseCommand("lookup skill", [==[Syntax: .lookup skill $namepart]==], [==[Looks up a skill by $namepart]==], [==[$namepart]==])
	parseCommand("lookup skybox", [==[Syntax: .lookup skybox $skybox]==], [==[Searches for a Skybox based on its Area]==], [==[$skybox]==])
	parseCommand("lookup spell", [==[Syntax: .lookup spell $namepart]==], [==[Looks up a spell by $namepart]==], [==[$namepart]==])
	parseCommand("lookup spell id", [==[Syntax: .lookup spell id #spellid]==], [==[Looks up a spell by #spellid]==], [==[#spellid]==])
	parseCommand("lookup tele", [==[Syntax: .lookup tele $substring]==], [==[Search and output all .tele command locations with provide $substring in name.]==], [==[$substring]==])
	parseCommand("lookup title", [==[Syntax: .lookup title $namepart]==], [==[Looks up a title by $namepart]==], [==[$namepart]==])
	parseCommand("modify", [==[Syntax: .modify $subcommand]==], [==[Type .modify to see the list of possible subcommands or .help modify $subcommand to see info on subcommands]==], [==[$subcommand]==])
	parseCommand("modify anim", [==[Syntax: .modify anim #emoteid]==], [==[Modifies target's current animation. Use .lookup emote to find IDs.]==], [==[#emoteid]==])
	parseCommand("modify currency", [==[Syntax: .modify currency #id #value]==], [==[Add $amount (without precision) of $currency to the selected player.]==], [==[#id]==],[==[#value]==])
	parseCommand("modify drunk", [==[Syntax: .modify drunk #value]==], [==[Set drunk level to #value (0..100). Value of 0 to remove drunk state]==], [==[#value]==])
	parseCommand("modify energy", [==[Syntax: .modify energy #energy]==], [==[Modify the energy of the selected player. If no player is selected]==], [==[#energy]==])
	parseCommand("modify gender", [==[Syntax: .modify gender male/female]==], [==[Change gender of selected player.]==], [==[male/female]==])
	parseCommand("modify honor", [==[Syntax: .modify honor $amount]==], [==[Add $amount honor points to the selected player.]==], [==[$amount]==])
	parseCommand("modify hp", [==[Syntax: .modify hp #newhp]==], [==[Modify the hp of the selected player. If no player is selected]==], [==[#newhp]==])
	parseCommand("modify mana", [==[Syntax: .modify mana #newmana]==], [==[Modify the mana of the selected player. If no player is selected]==], [==[#newmana]==])
	parseCommand("modify money", [==[Syntax: .modify money #money]==], [==[.money #money, Add or remove money to the selected player. If no player is selected]==], [==[#money]==])
	parseCommand("modify mount", [==[Syntax: .modify mount #DisplayID]==], [==[Mount yourself with #DisplayID creature.]==], [==[#DisplayID]==])
	parseCommand("modify native", [==[Syntax: .modify native #displayid]==], [==[Modifies the native displayid of target]==], [==[#displayid]==])
	parseCommand("modify phase", [==[Syntax: .modify phase #phasemask]==], [==[Selected character phasemask changed to #phasemask with related world vision update. Change active until in game phase changed]==], [==[#phasemask]==])
	parseCommand("modify power", [==[Syntax: .modify power #powerType #amount]==], [==[Modify the power of the selected player. If no player is selected]==], [==[#powerType]==],[==[#amount]==])
	parseCommand("modify rage", [==[Syntax: .modify rage #newrage]==], [==[Modify the rage of the selected player. If no player is selected]==], [==[#newrage]==])
	parseCommand("modify reputation", [==[Syntax: .modify reputation #repId (#repvalue | $rankname [#delta])]==], [==[Sets the selected players reputation with faction #repId to #repvalue or to $reprank. If the reputation rank name is provided]==], [==[#repId]==],[==[(#repvalue]==],[==[|]==],[==[$rankname]==],[==[[#delta])]==])
	parseCommand("modify runicpower", [==[Syntax: .modify runicpower #newrunicpower]==], [==[Modify the runic power of the selected player. If no player is selected]==], [==[#newrunicpower]==])
	parseCommand("modify scale", [==[Syntax: .modify scale #scale]==], [==[Modify size of the selected player or creature to "normal scale"*rate. If no player or creature is selected]==], [==[#scale]==])
	parseCommand("modify sitstate", [==[Syntax: .modify sitstate #height]==], [==[Pushes your character down and seats them on an invisible seat. #height can be high]==], [==[#height]==])
	parseCommand("modify speed", [==[Syntax: .modify speed [$speedtype] #rate]==], [==[Modify the running speed of the selected player to "normal base run speed"= 1. If no player is selected]==], [==[[$speedtype]]==],[==[#rate]==])
	parseCommand("modify speed all", [==[Syntax: .modify speed all #rate]==], [==[Modify all speeds -run]==], [==[#rate]==])
	parseCommand("modify speed backwalk", [==[Syntax: .modify speed backwalk #rate]==], [==[Modify the speed of the selected player while running backwards to "normal walk back speed"*rate. If no player is selected]==], [==[#rate]==])
	parseCommand("modify speed fly", [==[Syntax: .modify speed fly #rate]==], [==[Modify the flying speed of the selected player to "normal flying speed"*rate. If no player is selected]==], [==[#rate]==])
	parseCommand("modify speed swim", [==[Syntax: .modify speed swim #rate]==], [==[Modify the swim speed of the selected player to "normal swim speed"*rate. If no player is selected]==], [==[#rate]==])
	parseCommand("modify speed walk", [==[Syntax: .modify speed walk #rate]==], [==[Modify the speed of the selected player while running to "normal walk speed"*rate. If no player is selected]==], [==[#rate]==])
	parseCommand("modify standstate", [==[Syntax: .modify standstate #emoteid]==], [==[Change the emote of your character while standing to #emoteid.]==], [==[#emoteid]==])
	parseCommand("modify talentpoints", [==[Syntax: .modify talentpoints #amount]==], [==[Set free talent points for selected character or character's pet. It will be reset to default expected at next levelup/login/quest reward.]==], [==[#amount]==])
	parseCommand("modify xp", [==[Syntax: .modify xp #xp]==], [==[Gives experience points to the targeted player or self.]==], [==[#xp]==])
	parseCommand("morph", [==[Syntax: .morph #displayid]==], [==[Change your current model id to #displayid.]==], [==[#displayid]==])
	parseCommand("npc", [==[Syntax: .npc $subcommand]==], [==[Type .npc to see the list of possible subcommands or .help npc $subcommand to see info on subcommands]==], [==[$subcommand]==])
	parseCommand("npc add formation", [==[Syntax: .npc add formation $leader]==], [==[Add selected creature to a leader's formation.]==], [==[$leader]==])
	parseCommand("npc cast", [==[Syntax: .npc cast #SpellID]==], [==[Shortcut for .npc cast creature. TargetGuid becomes the creature itself]==], [==[#SpellID]==])
	parseCommand("npc cast area", [==[Syntax: .npc cast area #SpellID [#Triggered] [#IntervalInMiliseconds] [#x #y #z]]==], [==[Makes the creature cast #SpellID in the location where you are standing. If #Triggered is 1]==], [==[#SpellID]==],[==[[#Triggered]]==],[==[[#IntervalInMiliseconds]]==],[==[[#x]==],[==[#y]==],[==[#z]]==])
	parseCommand("npc cast creature", [==[Syntax: .npc cast creature #SpellID #TargetGUID [#Triggered] [#IntervalInMiliseconds]]==], [==[Casts #SpellID on creature with guid #TargetGUID. If #Triggered is 1]==], [==[#SpellID]==],[==[#TargetGUID]==],[==[[#Triggered]]==],[==[[#IntervalInMiliseconds]]==])
	parseCommand("npc cast delete", [==[Syntax: .npc cast delete #id]==], [==[Deletes cast by ID. You can find cast IDs using .npc cast list.]==], [==[#id]==])
	parseCommand("npc cast list", [==[Syntax: .npc cast list]==], [==[Shows the targetted creature's Cast List.]==], nil)
	parseCommand("npc cast player", [==[Syntax: .npc cast player #SpellID #Triggered [$PlayerName]]==], [==[Casts #SpellID on $PlayerName. If #Triggered is 1]==], [==[#SpellID]==],[==[#Triggered]==],[==[[$PlayerName]]==])
	parseCommand("npc copy", [==[Syntax: .npc copy forwards/backwards/left/right/up/down]==], [==[]==], [==[forwards/backwards/left/right/up/down]==])
	parseCommand("npc delete", [==[Syntax: .npc delete [#guid]]==], [==[Delete creature with guid #guid (or the selected if no guid is provided)]==], [==[[#guid]]==])
	parseCommand("npc delete item", [==[Syntax: .npc delete item #itemId]==], [==[Remove item #itemid from item list of selected vendor.]==], [==[#itemId]==])
	parseCommand("npc emote", [==[Syntax: .npc emote #emoteid [repeat]]==], [==[Make the selected creature emote with an emote of id #emoteid. May include the 'permanent' parameter to make it last through restarts. Example: .npc em 10 r]==], [==[#emoteid]==],[==[[repeat]]==])
	parseCommand("npc face", [==[Syntax: .npc face $north/east/south/west or #direction.]==], [==[]==], [==[$north/east/south/west]==],[==[or]==],[==[#direction.]==])
	parseCommand("npc follow", [==[Syntax: .npc follow [#distance] [#angle]]==], [==[Sets the target creature to follow you like a pet. If #distance (in yards) and #angle (in degrees) are specified]==], [==[[#distance]]==],[==[[#angle]]==])
	parseCommand("npc follow stop", [==[Syntax: .npc follow stop]==], [==[Selected creature (non pet) stop follow you.]==], nil)
	parseCommand("npc formation", [==[]==], [==[Allows creatures to follow a leader at given distance and angle.]==], nil)
	parseCommand("npc formation add", [==[Syntax: .npc formation add #leaderGUID]==], [==[Adds selected creature to the formation specified by #leaderGUID at its current position relative to the leader.]==], [==[#leaderGUID]==])
	parseCommand("npc formation here", [==[Syntax: .npc formation here #leaderGUID]==], [==[Adds selected creature to the formation specified by #leaderGUID at your current position relative to the leader.]==], [==[#leaderGUID]==])
	parseCommand("npc formation info", [==[Syntax: .npc formation info]==], [==[Shows information about which creatures are part of the formation the selected creature is a part of.]==], nil)
	parseCommand("npc formation remove", [==[Syntax: .npc formation remove]==], [==[Removes the selected creature from the formation it is a part of. If it is the leader]==], nil)
	parseCommand("npc formation show", [==[Syntax: .npc formation show]==], [==[Shows all members of the formation the selected creature is a part of briefly.]==], nil)
	parseCommand("npc go", [==[Syntax: .npc go [#npc_guid]]==], [==[Teleport your character to npc with guid #npc_guid]==], [==[[#npc_guid]]==])
	parseCommand("npc info", [==[Syntax: .npc info]==], [==[Display a list of details for the selected creature. The list includes:, - GUID]==], nil)
	parseCommand("npc mount", [==[Syntax: .npc mount #displayID]==], [==[Mounts the NPC on a #displayid. You can find displayids by using '.npc info' on an NPC or '.look display creature $name'.]==], [==[#displayID]==])
	parseCommand("npc move", [==[Syntax: .npc move [$direction #distance]]==], [==[Move the targeted creature spawn point to your coordinates. Alternatively]==], [==[[$direction]==],[==[#distance]]==])
	parseCommand("npc near", [==[Syntax: .npc near [#distance]]==], [==[Output npcs at distance #distance from player. Output npc guids and coordinates sorted by distance from character. If #distance not provided use 10 as default value.]==], [==[[#distance]]==])
	parseCommand("npc revive", [==[Syntax: .npc revive]==], [==[Revives the selected NPC if deceased.]==], nil)
	parseCommand("npc say", [==[Syntax: .npc say $message]==], [==[Make selected creature say specified message.]==], [==[$message]==])
	parseCommand("npc scale", [==[Syntax: .npc scale $scale]==], [==[Sets the scale of targetted NPC.]==], [==[$scale]==])
	parseCommand("npc set", [==[]==], [==[]==], nil)
	parseCommand("npc set aura", [==[Syntax: .npc set aura #spellid]==], [==[Adds an aura to an NPC. Persists through restarts.]==], [==[#spellid]==])
	parseCommand("npc set autohover", [==[Syntax: .npc set autohover off/dynamic/always]==], [==[Sets a creature's hover policy. Dynamic - Only hover when above ground / Always - Hover while on the ground as well.]==], [==[off/dynamic/always]==])
	parseCommand("npc set clickable", [==[Syntax: .npc set clickable [$on/$off]]==], [==[Sets whether or not an NPC is clickable. If neither on nor off are passed]==], [==[[$on/$off]]==])
	parseCommand("npc set flyable", [==[Syntax: .npc set flyable [on/off]]==], [==[Sets a creature's flyable state. If no input given]==], [==[[on/off]]==])
	parseCommand("npc set model", [==[Syntax: .npc set model #displayid]==], [==[Sets the model of the selected creature to #displayid.]==], [==[#displayid]==])
	parseCommand("npc set sheath", [==[Syntax: .npc set sheath $sheath]==], [==[Sets sheath state of the NPC. Accepted arguments are: 0]==], [==[$sheath]==])
	parseCommand("npc set swimable", [==[Syntax: .npc set rootable [on/off]]==], [==[Sets a creature's swimable state. If no input given]==], [==[[on/off]]==])
	parseCommand("npc set unaura", [==[Syntax: .npc set unaura #spellid|$all]==], [==[Removes an aura from an NPC. Removes auras that persist through restarts. Accepts 'all' instead of #spellid]==], [==[#spellid|$all]==])
	parseCommand("npc set weapon", [==[Syntax: .npc set weapon #item_entry #item_slot [#bonus_id]]==], [==[Equips an npc with #item_entry]==], [==[#item_entry]==],[==[#item_slot]==],[==[[#bonus_id]]==])
	parseCommand("npc spawn", [==[Syntax: .npc spawn #creatureid]==], [==[Spawn a creature by the given template id of #creatureid. Use '.lookup creature $name' to find creatureids.]==], [==[#creatureid]==])
	parseCommand("npc textemote", [==[Syntax: .npc textemote #emoteid]==], [==[Make the selected creature to do textemote with an emote of id #emoteid.]==], [==[#emoteid]==])
	parseCommand("npc turn", [==[Syntax: .npc turn $where [$formation]#n]==], [==[Makes the selected NPC turn to either \'here\' (your position)]==], [==[$where]==],[==[[$formation]#n]==])
	parseCommand("npc whisper", [==[Syntax: .npc whisper $playername #text]==], [==[Make the selected npc whisper #text to $playername. $playername must be in the phase in which you are an officer.]==], [==[$playername]==],[==[#text]==])
	parseCommand("npc yell", [==[Syntax: .npc yell $message]==], [==[Make selected creature yell the specified message.]==], [==[$message]==])
	parseCommand("phase", [==[Syntax: .phase $subcommand]==], [==[Type .phase to see the list of possible subcommands or .help phase $subcommand to see info on subcommands.]==], [==[$subcommand]==])
	parseCommand("phase announce", [==[Syntax: .phase announce $message]==], [==[Send a chat message to people in your current phase.]==], [==[$message]==])
	parseCommand("phase aura", [==[Syntax: .phase aura #spellid]==], [==[Adds an aura to all phase members.]==], [==[#spellid]==])
	parseCommand("phase blacklist", [==[Syntax: .phase blacklist $subcommand]==], [==[Type .phase blacklist to see the list of possible subcommands or .help phase blacklist $subcommand to see info on subcommands.]==], [==[$subcommand]==])
	parseCommand("phase blacklist add", [==[Syntax: .phase blacklist add $PlayerName]==], [==[Adds a player to the blacklist of the current phase.]==], [==[$PlayerName]==])
	parseCommand("phase blacklist remove", [==[Syntax: .phase blacklist remove $PlayerName]==], [==[Removes a player from the blacklist of the current phase.]==], [==[$PlayerName]==])
	parseCommand("phase changeowner", [==[Syntax: .phase changeowner $PlayerName]==], [==[Gives your phase to another player. Requires confirmation!]==], [==[$PlayerName]==])
	parseCommand("phase cleartemp", [==[Syntax: .phase cleartemp [#radius]]==], [==[Clears all temporary objects and creatures from 100 yards around you. If #radius is provided]==], [==[[#radius]]==])
	parseCommand("phase create", [==[Syntax: .phase create $PhaseName]==], [==[Create a phase for your character.]==], [==[$PhaseName]==])
	parseCommand("phase delete", [==[Syntax: .phase delete]==], [==[Delete your character"s phase. Requires confirmation!]==], nil)
	parseCommand("phase dm", [==[Syntax: .phase dm [$on/$off]]==], [==[Sets the <DM> tag]==], [==[[$on/$off]]==])
	parseCommand("phase enter", [==[Syntax: .phase enter #PhaseID [$here]]==], [==[Enter the given phase. If you are an officer]==], [==[#PhaseID]==],[==[[$here]]==])
	parseCommand("phase exit", [==[Syntax: .phase exit]==], [==[Exits the phase you are currently in]==], nil)
	parseCommand("phase forge", [==[]==], [==[]==], nil)
	parseCommand("phase forge npc", [==[]==], [==[]==], nil)
	parseCommand("phase forge npc aura", [==[Syntax: .phase forge npc aura #spellid]==], [==[Buffs the NPC template with #spellid.]==], [==[#spellid]==])
	parseCommand("phase forge npc autohover", [==[Syntax: .phase forge npc autohover off/dynamic/always]==], [==[Sets a creature's hover policy. Dynamic - Only hover when above ground / Always - Hover while on the ground as well.]==], [==[off/dynamic/always]==])
	parseCommand("phase forge npc clickable", [==[Syntax: .phase forge npc clickable [$on/$off]]==], [==[Sets whether or not an NPC is clickable. If neither on nor off are passed]==], [==[[$on/$off]]==])
	parseCommand("phase forge npc copy", [==[Syntax: .phase forge npc copy]==], [==[Creates a new phase forged npc]==], nil)
	parseCommand("phase forge npc create", [==[Syntax: .phase forge npc create]==], [==[Initializes an npc template.]==], nil)
	parseCommand("phase forge npc creaturetype", [==[Syntax: .phase forge npc creaturetype $type]==], [==[Available types: Beast]==], [==[$type]==])
	parseCommand("phase forge npc delete", [==[Syntax: .phase forge npc delete #entry]==], [==[Deletes the forged creature_template of entry #entry.]==], [==[#entry]==])
	parseCommand("phase forge npc displays", [==[Syntax: .phase forge npc displays]==], [==[List of commands associated with modifying the displayids that a phase forge NPC can use.]==], nil)
	parseCommand("phase forge npc displays add", [==[Syntax: .phase forge npc displays add #displayid #scale #weight]==], [==[Adds a new displayid (and]==], [==[#displayid]==],[==[#scale]==],[==[#weight]==])
	parseCommand("phase forge npc displays list", [==[Syntax: .phase forge npc displays list]==], [==[Shows all of the possible displayids]==], nil)
	parseCommand("phase forge npc displays remove", [==[Syntax: .phase forge npc displays remove #id]==], [==[Removes the given displayid from the list of possible displayids for the selected phase forge creature.]==], [==[#id]==])
	parseCommand("phase forge npc displays scale", [==[Syntax: .phase forge npc displays scale #displayid #scale]==], [==[Modifies the scale of the creature when using the given displayid.]==], [==[#displayid]==],[==[#scale]==])
	parseCommand("phase forge npc displays weight", [==[Syntax: .phase forge npc displays weight #displayid #weight]==], [==[Modifies the probability of the creature using the given displayid. The probabilities are normalised]==], [==[#displayid]==],[==[#weight]==])
	parseCommand("phase forge npc faction", [==[Syntax: .phase forge npc faction #factionid]==], [==[Sets creature template to use faction template #factionid.]==], [==[#factionid]==])
	parseCommand("phase forge npc femalename", [==[Syntax: .phase forge npc femalename $name]==], [==[Sets the female name of the NPC to $name. If the model it spawns as is defined as a female]==], [==[$name]==])
	parseCommand("phase forge npc flyable", [==[Syntax: .phase forge npc flyable [on/off]]==], [==[Sets a creature's flyable state. If no input given]==], [==[[on/off]]==])
	parseCommand("phase forge npc gossip", [==[]==], [==[Allows customisation of NPC gossip dialogs & options.]==], nil)
	parseCommand("phase forge npc gossip debug", [==[Syntax: .phase forge npc gossip debug]==], [==[Eanbles or disables enriched info in custom gossips to assist in using gossip forge commands.]==], nil)
	parseCommand("phase forge npc gossip enable", [==[Syntax: .phase forge npc gossip enable]==], [==[Enables the gossip forge on the creature.]==], nil)
	parseCommand("phase forge npc gossip disable", [==[Syntax: .phase forge npc gossip disable]==], [==[Disables the gossip forge on the creature. Does not delete the gossip data.]==], nil)
	parseCommand("phase forge npc gossip option icon", [==[Syntax: .phase forge npc gossip option icon #icon]==], [==[Sets the option #option to have the #icon specified.]==], [==[#icon]==])
	parseCommand("phase forge npc gossip option link", [==[Syntax: .phase forge npc gossip option link #option #page]==], [==[Links the option #option to the #page specified.]==], [==[#option]==],[==[#page]==])
	parseCommand("phase forge npc gossip option remove", [==[Syntax: .phase forge npc gossip option remove #option]==], [==[Deletes the option at #option. Decrements all subsequent option ids.]==], [==[#option]==])
	parseCommand("phase forge npc gossip option text", [==[Syntax: .phase forge npc gossip option text #option $text]==], [==[Replaces the text for the option at #option to $text.]==], [==[#option]==],[==[$text]==])
	parseCommand("phase forge npc gossip option", [==[]==], [==[Commands to handle branching dialog options into different pages.]==], nil)
	parseCommand("phase forge npc gossip option add", [==[Syntax: .phase forge npc gossip option add $text]==], [==[Adds a new option to the current page in your gossip window with the label $text.]==], [==[$text]==])
	parseCommand("phase forge npc gossip page", [==[]==], [==[Commands to handle the pages that branching dialog options link to.]==], nil)
	parseCommand("phase forge npc gossip page add", [==[Syntax: .phase forge npc gossip page add $text]==], [==[Adds a new page starting and populates it with $text in text block 0.]==], [==[$text]==])
	parseCommand("phase forge npc gossip page list", [==[Syntax: .phase forge npc gossip page list]==], [==[Lists out all of the pages that a NPC currently has]==], nil)
	parseCommand("phase forge npc gossip page remove", [==[Syntax: .phase forge npc gossip page remove #page]==], [==[Deletes the page #page. Decrements all subsequent pages (and option links).]==], [==[#page]==])
	parseCommand("phase forge npc gossip text", [==[]==], [==[Commands to handle text on each page of the NPC.]==], nil)
	parseCommand("phase forge npc gossip text add", [==[Syntax: .phase forge npc gossip text add $text]==], [==[Adds a new text block containing $text to the current page in your gossip window.]==], [==[$text]==])
	parseCommand("phase forge npc gossip text remove", [==[Syntax: .phase forge npc gossip text remove #textblock]==], [==[Deletes the text block at #textblock. Decrements all subsequent text block ids.]==], [==[#textblock]==])
	parseCommand("phase forge npc gossip text get", [==[Syntax: .phase forge npc gossip text get (#textblock)]==], [==[Outputs the overwrite command input for the given text block]==], [==[(#textblock)]==])
	parseCommand("phase forge npc gossip text overwrite", [==[Syntax: .phase forge npc gossip text overwrite #textblock $text]==], [==[Replaces the text block at #textblock with the new $text provided.]==], [==[#textblock]==],[==[$text]==])
	parseCommand("phase forge npc gossip icon", [==[Syntax: .phase forge npc gossip icon #icon]==], [==[Sets the selected NPC to have the mouseover #icon specified.]==], [==[#icon]==])
	parseCommand("phase forge npc health", [==[Syntax: .phase forge npc health #mod]==], [==[Sets the health modifier of the NPC to #mod.]==], [==[#mod]==])
	parseCommand("phase forge npc level", [==[Syntax: .phase forge npc level #minlevel [#maxlevel]]==], [==[Sets the minium and maximum levels of the creature.]==], [==[#minlevel]==],[==[[#maxlevel]]==])
	parseCommand("phase forge npc list", [==[Syntax: .phase forge npc list [$name]]==], [==[Lists all forged NPCs of your current phase. Filterable by optional parameter $name.]==], [==[[$name]]==])
	parseCommand("phase forge npc list next", [==[Syntax: .phase forge npc list next]==], [==[Displays the next 50 results of .phase forge npc list.]==], nil)
	parseCommand("phase forge npc malename", [==[Syntax: .phase forge npc malename $name]==], [==[Sets the male name of the NPC to $name. If the model it spawns as is defined as a male]==], [==[$name]==])
	parseCommand("phase forge npc mana", [==[Syntax: .phase forge npc mana #mod]==], [==[Sets the mana modifier of the NPC to #mod.]==], [==[#mod]==])
	parseCommand("phase forge npc mount", [==[Syntax: .phase forge npc mount #displayid]==], [==[Mounts all creatures using this forged template with #displayid.]==], [==[#displayid]==])
	parseCommand("phase forge npc name", [==[Syntax: .phase forge npc name $name]==], [==[Sets both the male and female name of the NPC to $name.]==], [==[$name]==])
	parseCommand("phase forge npc outfit", [==[Syntax: .phase forge npc outfit]==], [==[]==], nil)
	parseCommand("phase forge npc outfit equip", [==[Syntax: .phase forge npc outfit equip #id [#bonus/#slot]]==], [==[Changes the equipment of the NPC to match #id. Input a negative number for displayid, 20: robe)]==], [==[#id]==],[==[[#bonus/#slot]]==])
	parseCommand("phase forge npc outfit face", [==[Syntax: .phase forge npc outfit face #faceid]==], [==[Changes the face of the forged NPC. Takes a number from 1 to 20. Depends on race. In some races]==], [==[#faceid]==])
	parseCommand("phase forge npc outfit facialhair", [==[Syntax: .phase forge npc outfit facialhair #facialid]==], [==[Changes the facial hair or earrings (depends on gender) of the forged NPC. Takes a number from 1 to 20. Depends on race. In some races]==], [==[#facialid]==])
	parseCommand("phase forge npc outfit feature", [==[Syntax: .phase forge npc outfit feature #slot #feature]==], [==[Adds feature #slot with value #feature. Slot can be a value from 0 to 2. Features are dynamic]==], [==[#slot]==],[==[#feature]==])
	parseCommand("phase forge npc outfit gender", [==[Syntax: .phase forge npc outfit gender $gender]==], [==[Changes the gender of the forged NPCs. $gender can be male or female.]==], [==[$gender]==])
	parseCommand("phase forge npc outfit guild", [==[Syntax: .phase forge npc outfit guild]==], [==[Changes the guild of the NPC (for tabards) to yours.]==], nil)
	parseCommand("phase forge npc outfit hair", [==[Syntax: .phase forge npc outfit hair #hairid]==], [==[Changes the hair of the forged NPC. Takes a number from 1 to 20. Depends on race.]==], [==[#hairid]==])
	parseCommand("phase forge npc outfit haircolor", [==[Syntax: .phase forge npc outfit haircolor #haircolorid]==], [==[Changes the hair of the forged NPC. Takes a number from 1 to 20. Depends on race.]==], [==[#haircolorid]==])
	parseCommand("phase forge npc outfit race", [==[Syntax: .phase forge npc outfit race #raceid]==], [==[Sets the race of the forged NPC. 1: Human / 2: Orc / 3: Dwarf / 4: Night Elf / 5: Undead / 6: Tauren / 7: Gnome / 8: Troll / 9: Goblin / 10: Blood Elf / 11: Draenei / 12: Fel Orc / 13: Naga / 14: Broken / 15: Skeleton, 16: Vrykul / 17: Tsukarr / 18: Forest Troll / 19: Taunka / 20: Northrend Skeleton / 21: Ice Troll / 22: Worgen / 23: Gilnean / 24/25/26: Pandaren / 27: Nightborne, 28: Highmountain / 29: Void Elf / 30: Lightforged / 31: Zandalari / 32: Kul Tiran / 33: Thin Human / 34: Dark Iron / 35: Vulpera / 36: Mag'har / 37: Mechagnome]==], [==[#raceid]==])
	parseCommand("phase forge npc outfit skin", [==[Syntax: .phase forge npc outfit skin #skinid]==], [==[Changes the skin of the forged NPC. Takes a number from 1 to 20. Depends on race. In some races]==], [==[#skinid]==])
	parseCommand("phase forge npc outfit unequip", [==[]==], [==[]==], nil)
	parseCommand("phase forge npc outfit unequip all", [==[Syntax: .phase forge npc outfit unequip all]==], [==[Unequips everything but weapons from target npc.]==], nil)
	parseCommand("phase forge npc outfit unequip back", [==[Syntax: .phase forge npc outfit unequip back #entry]==], [==[Changes the equipped cape of the NPC to #entry.]==], [==[#entry]==])
	parseCommand("phase forge npc outfit unequip chest", [==[Syntax: .phase forge npc outfit unequip chest #entry]==], [==[Changes the equipped shirt of the NPC to #entry.]==], [==[#entry]==])
	parseCommand("phase forge npc outfit unequip feet", [==[Syntax: .phase forge npc outfit unequip feet #entry]==], [==[Changes the equipped footwear of the NPC to #entry.]==], [==[#entry]==])
	parseCommand("phase forge npc outfit unequip hands", [==[Syntax: .phase forge npc outfit unequip hands #entry]==], [==[Changes the equipped hands of the NPC to #entry.]==], [==[#entry]==])
	parseCommand("phase forge npc outfit unequip head", [==[Syntax: .phase forge npc outfit unequip head #entry]==], [==[Changes the equipped headpiece of the NPC to #entry.]==], [==[#entry]==])
	parseCommand("phase forge npc outfit unequip legs", [==[Syntax: .phase forge npc outfit unequip legs #entry]==], [==[Changes the equipped leggings of the NPC to #entry.]==], [==[#entry]==])
	parseCommand("phase forge npc outfit unequip shoulders", [==[Syntax: .phase forge npc outfit unequip shoulders #entry]==], [==[Changes the equipped shoulders of the NPC to #entry.]==], [==[#entry]==])
	parseCommand("phase forge npc outfit unequip tabard", [==[Syntax: .phase forge npc outfit unequip tabard #entry]==], [==[Changes the equipped cape of the NPC to #tabard. If the word 'guild' is provided]==], [==[#entry]==])
	parseCommand("phase forge npc outfit unequip waist", [==[Syntax: .phase forge npc outfit unequip waist #entry]==], [==[Changes the equipped waist of the NPC to #entry.]==], [==[#entry]==])
	parseCommand("phase forge npc outfit unequip wrists", [==[Syntax: .phase forge npc outfit unequip wrists #entry]==], [==[Changes the equipped wrists of the NPC to #entry.]==], [==[#entry]==])
	parseCommand("phase forge npc rank", [==[Syntax: .phase forge npc rank #rank_id]==], [==[Sets rank of a creature. Possible values: 0 (Normal)]==], [==[#rank_id]==])
	parseCommand("phase forge npc scale", [==[Syntax: .phase forge npc scale #scale]==], [==[Sets the creature template's base scale.]==], [==[#scale]==])
	parseCommand("phase forge npc sheath", [==[Syntax: .phase forge npc sheath #sheath]==], [==[Sets sheath state of all NPCs using this template. Accepted arguments are: 0]==], [==[#sheath]==])
	parseCommand("phase forge npc subname", [==[Syntax: .phase forge npc subname $subname]==], [==[Sets the subname of the selected forged NPC]==], [==[$subname]==])
	parseCommand("phase forge npc unaura", [==[Syntax: .phase forge npc unaura #spellid/all]==], [==[Removes the aura #spellid from NPC template. If 'all' is input]==], [==[#spellid/all]==])
	parseCommand("phase forge npc vehicle", [==[Syntax: .phase forge npc vehicle [on/off]]==], [==[Toggles whether the NPC is a vehicle or not]==], [==[[on/off]]==])
	parseCommand("phase forge npc weapon", [==[Syntax: .phase forge npc weapon #item_entry #item_slot [#bonus_id]]==], [==[The NPC upon spawn will be equipped with the input weapons. Valid #item_slots are 0: Mainhand / 1: Offhand / 2: Ranged. #bonus_id can add modifiers to an item]==], [==[#item_entry]==],[==[#item_slot]==],[==[[#bonus_id]]==])
	parseCommand("phase getmyphaseid", [==[]==], [==[Displays your character"s phase ID and name.]==], nil)
	parseCommand("phase info", [==[]==], [==[Displays information about the phase you are currently in.]==], nil)
	parseCommand("phase kick", [==[Syntax: .phase kick $PlayerName]==], [==[Removes the player from the phase.]==], [==[$PlayerName]==])
	parseCommand("phase lastspawn", [==[Syntax: .phase lastspawn #id]==], [==[Shows the last 10 objects spawned in phase #id.]==], [==[#id]==])
	parseCommand("phase member", [==[Syntax: .phase member $subcommand]==], [==[Type .phase member to see the list of possible subcommands or .help phase member $subcommand to see info on subcommands.]==], [==[$subcommand]==])
	parseCommand("phase member add", [==[Syntax: .phase member add $PlayerName]==], [==[Add a member to your current phase.]==], [==[$PlayerName]==])
	parseCommand("phase member demote", [==[Syntax: .phase member demote $PlayerName]==], [==[Demote an officer to a member in your current phase.]==], [==[$PlayerName]==])
	parseCommand("phase member promote", [==[Syntax: .phase member promote $PlayerName]==], [==[Promote a member to officer within your current phase.]==], [==[$PlayerName]==])
	parseCommand("phase member remove", [==[Syntax: .phase member remove $PlayerName]==], [==[Remove a player"s membership to your current phase.]==], [==[$PlayerName]==])
	parseCommand("phase overview", [==[]==], [==[Displays the population information of the most active phases.]==], nil)
	parseCommand("phase own", [==[Syntax: .phase own [$here]]==], [==[Enter your own phase. You may supply an optional parameter "here" in order to avoid teleporting to your starting location.]==], [==[[$here]]==])
	parseCommand("phase playsound", [==[Syntax: .phase playsound #SoundID]==], [==[Play a sound file to others in your current phase.]==], [==[#SoundID]==])
	parseCommand("phase population", [==[]==], [==[Displays the names of players in the phase you are currently in.]==], nil)
	parseCommand("phase rename", [==[Syntax: .phase rename $NewPhaseName]==], [==[Changes the name of your phase to the new one given.]==], [==[$NewPhaseName]==])
	parseCommand("phase reset", [==[]==], [==[]==], nil)
	parseCommand("phase reset skybox", [==[]==], [==[]==], nil)
	parseCommand("phase reset skybox default", [==[Syntax: .phase reset skybox default]==], [==[Sets the default skybox to #skyboxid of the map you are currently in. Some zones do not have a Skybox]==], nil)
	parseCommand("phase reset skybox here", [==[Syntax: .phase reset skybox here]==], [==[Resets the skybox you are currently in.]==], nil)
	parseCommand("phase reset skybox map", [==[Syntax: .phase reset skybox map [#mapid]]==], [==[Resets all skyboxes inside your map or #mapid.]==], [==[[#mapid]]==])
	parseCommand("phase reset skybox zone", [==[Syntax: .phase reset skybox zone [#zoneid]]==], [==[Resets all skyboxes inside your zone or #zoneid.]==], [==[[#zoneid]]==])
	parseCommand("phase set", [==[]==], [==[Type .phase set to see the list of possible subcommands or .help phase set $subcommand to see info on subcommands.]==], nil)
	parseCommand("phase set Changes the phase's description to $description.", [==[Syntax: .phase set Changes the phase's description to $description. $Changes the phase's description to $description.]==], [==[Changes the phase's description to $description.]==], [==[$description]==])
	parseCommand("phase set icon", [==[Syntax: .phase set icon $icon]==], [==[Changes the phase's icon to $icon.]==], [==[$icon]==])
	parseCommand("phase set information", [==[Syntax: .phase set information init/append $information]==], [==[Changes phase's information field to $description. Use init to reset the description]==], [==[init/append]==],[==[$information]==])
	parseCommand("phase set message", [==[Syntax: .phase set message $message]==], [==[Set a message to be displayed to players upon entering your phase.]==], [==[$message]==])
	parseCommand("phase set skybox default", [==[Syntax: .phase set skybox default [#skyboxid]]==], [==[Sets the default skybox to #skyboxid. Some zones do not have a Skybox]==], [==[[#skyboxid]]==])
	parseCommand("phase set skybox here", [==[Syntax: .phase set skybox here #skyboxid]==], [==[Replaces the current skybox with #skybox. A full list can be found in the Phase Manager or in the forums.]==], [==[#skyboxid]==])
	parseCommand("phase set skybox map", [==[Syntax: .phase set skybox map #skyboxid [#mapid]]==], [==[Replaces every skybox on the map you are currently in or #mapid with #skyboxid.]==], [==[#skyboxid]==],[==[[#mapid]]==])
	parseCommand("phase set skybox zone", [==[Syntax: .phase set skybox zone #skyboxid [#zoneid]]==], [==[Replaces the current skybox with #skyboxid using the player's current zone or #zoneid. A full list can be found in the Phase Manager or in the forums.]==], [==[#skyboxid]==],[==[[#zoneid]]==])
	parseCommand("phase set starting", [==[Syntax: .phase set starting [\'disable\']]==], [==[Set the starting position for players entering your phase. Enter 'disable' to remove.]==], [==[[\'disable\']]==])
	parseCommand("phase set time", [==[Syntax: .phase set time $hh:$mm [permanent]]==], [==[Sets the time for everyone who is currently in your phase to $h$h:$m$m. Return to real gametime with .phase settime off. If [permanent]]==], [==[$hh:$mm]==],[==[[permanent]]==])
	parseCommand("phase set time off", [==[Syntax: .phase set time off]==], [==[Turn off the custom set time and restore everyone to realtime.]==], nil)
	parseCommand("phase set weather", [==[Syntax: .phase set weather $weather #density $permanent]==], [==[Sets the weather in the phase. $weather can be 'normal', 'ashlight', 'ashmedium', 'ashheavy', 'emberslight', 'embersmedium', 'embersheavy', 'mistwhite', 'mistyellow', 'mistblack', 'burning', 'redspark' or 'blacksand'. #density is a number from 0 to 100, which only affects some weathers.]==], [==[$weather]==],[==[#density]==],[==[$permanent]==])
	parseCommand("phase shift", [==[]==], [==[]==], nil)
	parseCommand("phase shift doodads", [==[Syntax: .phase shift doodads [unknown] [on/off]]==], [==[Unloads or loads all map doodads in the current zone. Limited to 6 per map. For example]==], [==[[unknown]]==],[==[[on/off]]==])
	parseCommand("phase shift doodads adt", [==[Syntax: .phase shift doodads]==], [==[Unloads or loads all doodads in the ADT.]==], nil)
	parseCommand("phase shift doodads zone", [==[Syntax: .phase shift doodads]==], [==[Unloads or loads all doodads in the zone.]==], nil)
	parseCommand("phase shift doodads list", [==[Syntax: .phase shift doodads list]==], [==[List all phaseshifts in the phase.]==], nil)
	parseCommand("phase shift reset", [==[Syntax: .phase shift reset]==], [==[Resets all phaseshifts in current map.]==], nil)
	parseCommand("phase show", [==[Syntax: .phase show $subcommand]==], [==[Type .phase show to see the list of possible subcommands or .help phase show $subcommand to see info on subcommands.]==], nil)
	parseCommand("phase show blacklist", [==[]==], [==[Prints all players on the phase blacklist.]==], nil)
	parseCommand("phase show characters", [==[]==], [==[Displays every character that is listed from the current phase.]==], nil)
	parseCommand("phase show gobjects", [==[]==], [==[]==], nil)
	parseCommand("phase show members", [==[]==], [==[Displays every character that is a member of the current phase.]==], nil)
	parseCommand("phase show npcs", [==[]==], [==[]==], nil)
	parseCommand("phase show officers", [==[]==], [==[Displays every character that is an officer of the current phase.]==], nil)
	parseCommand("phase show whitelist", [==[]==], [==[Prints all players on the phase whitelist.]==], nil)
	parseCommand("phase summon", [==[Syntax: .phase summon [$playername/all]]==], [==[Summons a player in your phase]==], [==[[$playername/all]]==])
	parseCommand("phase tele", [==[Syntax: .phase tele $location]==], [==[Teleports to a location defined by an officer with .phase tele add. The naming is unique only to phases]==], [==[$location]==])
	parseCommand("phase tele add", [==[Syntax: .phase tele add $name]==], [==[Add a teleport location to the current phase. Note that the naming is unique to the phase and independent from tele locations for other phases as well as .tele locations. Must be an officer.]==], [==[$name]==])
	parseCommand("phase tele delete", [==[Syntax: .phase tele delete $name]==], [==[Removes a teleport location for the current phase. Must be an officer.]==], [==[$name]==])
	parseCommand("phase tele group", [==[Syntax: .phase tele group $location]==], [==[Teleports a group to a designated phase teleport. Must be an officer.]==], [==[$location]==])
	parseCommand("phase tele list", [==[Syntax: .phase tele list [$contains]]==], [==[Displays a list of the phase teleport locations. Optionally filtered with $contains.]==], [==[[$contains]]==])
	parseCommand("phase toggle", [==[]==], [==[Type .phase toggle to see the list of possible subcommands or .help phase toggle $subcommand to see info on subcommands.]==], nil)
	parseCommand("phase toggle cheats", [==[]==], [==[Stops people using the .cheat commands.]==], nil)
	parseCommand("phase toggle creatures", [==[]==], [==[Shows all creatures of the main world in the phase. Unlike the main phase]==], nil)
	parseCommand("phase toggle flight", [==[]==], [==[Stops everybody using .cheat fly or other means of flying.]==], nil)
	parseCommand("phase toggle listed", [==[Syntax: .phase toggle listed [on/off]]==], [==[Toggles whether the phase will be publicly listed. Accepts optional on or off to force specific status.]==], [==[[on/off]]==])
	parseCommand("phase toggle modify", [==[]==], [==[Stops people using the .modify commands.]==], nil)
	parseCommand("phase toggle mounting", [==[]==], [==[Stops non-officers being able to mount NPCs.]==], nil)
	parseCommand("phase toggle objects", [==[]==], [==[Shows all objects of the main world in the phase. Unlike the main phase]==], nil)
	parseCommand("phase toggle private", [==[Syntax: .phase toggle private [private/public]]==], [==[Toggle the list type of your phase between a blacklist and whitelist. Force to a particular state if part or all of 'private' or 'public' are entered.]==], [==[[private/public]]==])
	parseCommand("phase toggle silence", [==[Syntax: .phase toggle silence [on/off]]==], [==[Toggles phase-wide spell silence on or off. Non-officers will be unable to use .cast commands or cast spells.]==], [==[[on/off]]==])
	parseCommand("phase toggle teleport", [==[]==], [==[Prevents non-officers from using .gps]==], nil)
	parseCommand("phase unaura", [==[Syntax: .phase unaura #spellid]==], [==[Removes an aura from all phase members.]==], [==[#spellid]==])
	parseCommand("phase whitelist", [==[]==], [==[Type .phase whitelist to see the list of possible subcommands or .help phase whitelist $subcommand to see info on subcommands.]==], nil)
	parseCommand("phase whitelist add", [==[Syntax: .phase whitelist add $PlayerName]==], [==[Adds a player to the whitelist of the current phase.]==], [==[$PlayerName]==])
	parseCommand("phase whitelist remove", [==[Syntax: .phase whitelist remove $PlayerName]==], [==[Removes a player from the whitelist of the current phase.]==], [==[$PlayerName]==])
	parseCommand("pos1", [==[Syntax: .pos1 [#x y z coordinates]]==], [==[Sets a recorded position where you are or to the coordinates you specify.]==], [==[[#x]==],[==[y]==],[==[z]==],[==[coordinates]]==])
	parseCommand("pos2", [==[Syntax: .pos2 [#x y z coordinates]]==], [==[Sets a recorded position where you are or to the coordinates you specify.]==], [==[[#x]==],[==[y]==],[==[z]==],[==[coordinates]]==])
	parseCommand("possess", [==[Syntax: .possess]==], [==[Possesses the target creature. Requires officer rights.]==], nil)
	parseCommand("recall", [==[Syntax: .recall [$playername]]==], [==[Teleport $playername or selected player to the place where he has been before last use of a teleportation command. If no $playername is entered and no player is selected]==], [==[[$playername]]==])
	parseCommand("refresh", [==[Syntax: .refresh]==], [==[Refreshes all client-side objects. Used if you encounter players]==], nil)
	parseCommand("rename", [==[Syntax: .rename $NewName]==], [==[Rename yourself to $NewName. May contain spaces.]==], [==[$NewName]==])
	parseCommand("revive", [==[Syntax: .revive]==], [==[Revive the selected player. If no player is selected]==], nil)
	parseCommand("send", [==[]==], [==[Type .send to see a list of possible subcommands, or .help send $subcommand to see info on the subcommand.]==], nil)
	parseCommand("send mail", [==[Syntax: .send mail $playername "$subject" "$text"]==], [==[Send a mail to a player. Subject and mail text must be in "".]==], [==[$playername]==],[==["$subject"]==],[==["$text"]==])
	parseCommand("setskill", [==[Syntax: .setskill #skill #level [#max]]==], [==[Set a skill of id #skill with a current skill value of #level and a maximum value of #max (or equal current maximum if not provide) for the selected character. If no character is selected]==], [==[#skill]==],[==[#level]==],[==[[#max]]==])
	parseCommand("summon", [==[Syntax: .summon [$charactername]]==], [==[Teleport the given character to you. Character can be offline.]==], [==[[$charactername]]==])
	parseCommand("tele", [==[Syntax: .tele #location]==], [==[Teleport player to a given location.]==], [==[#location]==])
	parseCommand("titles", [==[]==], [==[]==], nil)
	parseCommand("titles add", [==[Syntax: .titles add #title]==], [==[Add title #title (id or shift-link) to known titles list for selected player.]==], [==[#title]==])
	parseCommand("titles remove", [==[Syntax: .titles remove #title]==], [==[Remove title #title (id or shift-link) from known titles list for selected player.]==], [==[#title]==])
	parseCommand("toggle", [==[]==], [==[Type .toggle to see the list of possible subcommands or .help toggle $subcommand to see info on subcommands.]==], nil)
	parseCommand("toggle announce", [==[Syntax: .toggle announce [on/off]]==], [==[Toggle announce on and off. Allows input of on/off for setting rather than toggling between.]==], [==[[on/off]]==])
	parseCommand("toggle appear", [==[Syntax: .toggle appear [on/off]]==], [==[Toggles appear on and off. Allows input of on/off for setting rather than toggling between.]==], [==[[on/off]]==])
	parseCommand("toggle collision", [==[Syntax: .toggle collision [on/off]]==], [==[Toggles collision on and off. Allows input of on/off for setting rather than toggling between]==], [==[[on/off]]==])
	parseCommand("toggle event", [==[Syntax: .toggle event [on/off]]==], [==[Toggle the event channel on and off. Allows input of on/off for setting rather than toggling between.]==], [==[[on/off]]==])
	parseCommand("toggle guild", [==[Syntax: .toggle guild [on/off]]==], [==[Toggle the guild channel on and off. Allows input of on/off for setting rather than toggling between.]==], [==[[on/off]]==])
	parseCommand("toggle highlight", [==[Syntax: .toggle highlight [on/off]]==], [==[Toggles highlighted object selection on or off. Can accept on/off if you want to specifically turn it on or off.]==], [==[[on/off]]==])
	parseCommand("toggle summon", [==[Syntax: .toggle summon [on/off]]==], [==[Toggles summon on and off. Can accept on/off if you want to directly turn it on or off.]==], [==[[on/off]]==])
	parseCommand("unaura", [==[Syntax: .unaura #spellid/all [self]]==], [==[Remove aura due to spell #spellid from the selected Unit. Use all to remove all auras. Add parameter self to force self target.]==], [==[#spellid/all]==],[==[[self]]==])
	parseCommand("unlearn", [==[Syntax: .unlearn #spell [all]]==], [==[Unlearn for selected player a spell #spell. If 'all' provided then all ranks unlearned.]==], [==[#spell]==],[==[[all]]==])
	parseCommand("unpossess", [==[Syntax: .unpossess]==], [==[Unpossesses the target creature after using .possess.]==], nil)
	parseCommand("visibility", [==[Syntax: .visibility ultralow/verylow/low/medium/high]==], [==[Sets the distance at which you load objects. This depends on your system specs and on recommendation by the phase.]==], [==[ultralow/verylow/low/medium/high]==])
	parseCommand("waypoints", [==[]==], [==[]==], nil)
	parseCommand("waypoints add", [==[Syntax: .waypoints add]==], [==[Adds a node at your location. Customize it using .waypoints modify.]==], nil)
	parseCommand("waypoints delete", [==[Syntax: .waypoints delete]==], [==[Deletes the selected point. Points can be viewed using .waypoints show on.]==], nil)
	parseCommand("waypoints info", [==[Syntax: .waypoints info]==], [==[Outputs information on the selected node. To show and select nodes]==], nil)
	parseCommand("waypoints modify", [==[]==], [==[]==], nil)
	parseCommand("waypoints modify activate", [==[Syntax: .waypoints modify activate #GUID]==], [==[The creature will "click" #GUID whenever it reaches this node. Object must be in the same chunk as the NPC to guarantee behavior.]==], [==[#GUID]==])
	parseCommand("waypoints modify cast", [==[Syntax: .waypoints modify cast #spellid]==], [==[The creature will cast #spellid whenever it reaches this node.]==], [==[#spellid]==])
	parseCommand("waypoints modify chance", [==[Syntax: .waypoints modify chance 0-100]==], [==[Sets the chance the events of the node will trigger. All the node's events activate together.]==], [==[0-100]==])
	parseCommand("waypoints modify chat", [==[]==], [==[]==], nil)
	parseCommand("waypoints modify chat emote", [==[Syntax: .waypoints modify chat emote $text]==], [==[The creature will Emote $text when it reaches the targetted node. See nodes using .waypoints modify show. Chance of triggering is controlled by .waypoints modify chance.]==], [==[$text]==])
	parseCommand("waypoints modify chat say", [==[Syntax: .waypoints modify chat say $text]==], [==[The creature will Say $text when it reaches the targetted node. See nodes using .waypoints modify show. Chance of triggering is controlled by .waypoints modify chance.]==], [==[$text]==])
	parseCommand("waypoints modify chat yell", [==[Syntax: .waypoints modify chat yell $text]==], [==[The creature will Yell $text when it reaches the targetted node. See nodes using .waypoints modify show. Chance of triggering is controlled by .waypoints modify chance.]==], [==[$text]==])
	parseCommand("waypoints modify delay", [==[Syntax: .waypoints modify delay #duration]==], [==[The NPC will wait #duration milliseconds (1000 == 1 second) after reaching the point. Max duration is 3600000 milliseconds (60 minutes).]==], [==[#duration]==])
	parseCommand("waypoints modify emote", [==[Syntax: .waypoints modify emote #emoteid]==], [==[The creature will emote #emote whenever it reaches this node. Adding a delay is highly recommended.]==], [==[#emoteid]==])
	parseCommand("waypoints modify movetype", [==[Syntax: .waypoints modify movetype $type]==], [==[Switches the movetype of the NPC to $type when the NPC is reaches the selected point. Points can be viewed using .waypoints show. Valid movetypes are walk]==], [==[$type]==])
	parseCommand("waypoints modify playsound", [==[Syntax: .waypoints modify playsound #soundid]==], [==[The creature will play #soundid whenever it reaches this node to all nearby players.]==], [==[#soundid]==])
	parseCommand("waypoints modify position", [==[Syntax: .waypoints modify position]==], [==[Relocates the point to the player. Points can be viewed using .waypoints show.]==], nil)
	parseCommand("waypoints modify unaura", [==[Syntax: .waypoints modify unaura #spellid|$all]==], [==[Removes aura of id #spellid from the creature when they reach the target node. Alternatively]==], [==[#spellid|$all]==])
	parseCommand("waypoints show", [==[Syntax: .waypoints show [on/off]]==], [==[Displays all the individual points of the creature's pathing. Use on or off to show or hide them. Only one person may see the nodes at any given time.]==], [==[[on/off]]==])
	parseCommand("waypoints start", [==[]==], [==[]==], nil)
	parseCommand("waypoints stop", [==[]==], [==[]==], nil)
	parseCommand("whisper", [==[Syntax: .whisper "Player Name" $message]==], [==[Sends a whisper message to a player within quotations]==], [==["Player]==],[==[Name"]==],[==[$message]==])
	parseCommand("worldport", [==[Syntax: .worldport #x #y [#z [#mapid [#orientation]]]]==], [==[Teleport player to point with (#x]==], [==[#x]==],[==[#y]==],[==[[#z]==],[==[[#mapid]==],[==[[#orientation]]]]==])
	parseCommand("forge item", [==[Syntax: .forge item $command]==], [==[Commandset to interface with items made in the item forge.]==], [==[$command]==])
	parseCommand("forge item create", [==[Syntax: .forge item create [$name]]==], [==[Creates a new item and adds it to your backpack. The item will either have the given $name or an Item ID name.]==], [==[[$name]]==])
	parseCommand("forge item clone", [==[Syntax: .forge item clone $item-link [$name]]==], [==[Creates a new item from an existing item]==], [==[$item-link]==],[==[[$name]]==])
	parseCommand("forge item copy", [==[Syntax: .forge item copy $item-link $item-link2]==], [==[Copies the data of $item-link2 to $item-link]==], [==[$item-link]==],[==[$item-link2]==])
	parseCommand("forge item set", [==[]==], [==[Commandset to make changes to the format of the item. Please note that once other players have received a broadcast of the item data (by being in the vicinity of you wearing it)]==], nil)
	parseCommand("forge item set name", [==[Syntax: .forge item set name $item-link $name]==], [==[Changes the item name of the specified $item-link to $name.]==], [==[$item-link]==],[==[$name]==])
	parseCommand("forge item set Changes the description of the specified $item-link to $description. To use colours", [==[Syntax: .forge item set Changes the description of the specified $item-link to $description. To use colours $item-link $Changes the description of the specified $item-link to $description. To use colours]==], [==[Changes the description of the specified $item-link to $description. To use colours]==], [==[$item-link]==],[==[$description]==])
	parseCommand("forge item set class", [==[Syntax: .forge item set class $item-link $classid]==], [==[Sets the item classification of the specified $item-link. 2 is for weapons]==], [==[$item-link]==],[==[$classid]==])
	parseCommand("forge item set subclass", [==[Syntax: .forge item set subclass $item-link $subclassid]==], [==[Sets the item sub-classification of the specified $item-link. You will find it beneficial to review https://wow.gamepedia.com/ItemType for more details.]==], [==[$item-link]==],[==[$subclassid]==])
	parseCommand("forge item set inventorytype", [==[Syntax: .forge item set inventorytype $item-link $inventorytype]==], [==[Sets the inventory-type of the specified $item-link. This only works on equippable items (classes 2 or 4). You will find it beneficial to review https://wow.gamepedia.com/Enum.InventoryType for more details.]==], [==[$item-link]==],[==[$inventorytype]==])
	parseCommand("forge item set sheath", [==[Syntax: .forge item set sheath $item-link $sheath]==], [==[Sets the sheath-type of the specified $item-link. This only works on equippable items in the main/off hand slots. Allows values from 0 to 7. Shields will likely only work as 4.]==], [==[$item-link]==],[==[$sheath]==])
	parseCommand("forge item set display", [==[Syntax: .forge item set display $item-link $item-link2]==], [==[Sets the model & texture of the specified $item-link to the displayid used by $item-link2. If the $item-link2 is instead a number]==], [==[$item-link]==],[==[$item-link2]==])
	parseCommand("forge item set icon", [==[Syntax: .forge item set icon $item-link $icon-link]==], [==[Sets the icon of the specified $item-link to the icon used by the specified $icon-link (e.g. spell]==], [==[$item-link]==],[==[$icon-link]==])
	parseCommand("forge item set quality", [==[Syntax: .forge item set quality $item-link $quality]==], [==[Sets the quality of the specified $item-link]==], [==[$item-link]==],[==[$quality]==])
	parseCommand("forge item set material", [==[Syntax: .forge item set material $item-link $material]==], [==[Sets the sound of the specified $item-link]==], [==[$item-link]==],[==[$material]==])
	parseCommand("forge item set bonding", [==[Syntax: .forge item set bonding $item-link $binding]==], [==[Specifies the binding of the specified $item-link - bind on equip/pick-up/if it can be traded etc. Allows values from 0 to 4.]==], [==[$item-link]==],[==[$binding]==])
	parseCommand("forge item set stackable", [==[Syntax: .forge item set stackable $item-link $count]==], [==[Specifies (up to 9999) the max stack size of the specified $item-link. Cannot be done on weapons or armour.]==], [==[$item-link]==],[==[$count]==])
	parseCommand("forge item set property", [==[Syntax: .forge item set property $command]==], [==[Commandset to determine what attributes are associated with the item - permission to copy and add]==], nil)
	parseCommand("forge item set property additem", [==[Syntax: .forge item set property additem $command]==], [==[Commandset to determine whitelists for who is able to add the specified $item-link other than yourself.]==], nil)
	parseCommand("forge item set property additem character", [==[Syntax: .forge item set property additem character $item-link $on/off]==], [==[Controls if characters of a whitelist of characters are able to add the specified $item-link]==], [==[$item-link]==],[==[$on/off]==])
	parseCommand("forge item set property additem officer", [==[Syntax: .forge item set property additem officer $item-link $on/off]==], [==[Controls if officers of a whitelist of phaseids are able to add the specified $item-link]==], [==[$item-link]==],[==[$on/off]==])
	parseCommand("forge item set property additem member", [==[Syntax: .forge item set property additem member $item-link $on/$off]==], [==[Controls if members of a whitelist of phaseids are able to add the specified $item-link.]==], [==[$item-link]==],[==[$on/$off]==])
	parseCommand("forge item set property additem anyone", [==[Syntax: .forge item set property additem anyone $item-link $on/$off]==], [==[Controls if everyone can add the specified $item-link.]==], [==[$item-link]==],[==[$on/$off]==])
	parseCommand("forge item set property copy", [==[Syntax: .forge item set property copy $item-link $on/off]==], [==[Controls if the specified $item-link can be used by another player for the .item copy or .item clone commands.]==], [==[$item-link]==],[==[$on/off]==])
	parseCommand("forge item set property creator", [==[Syntax: .forge item set property creator $item-link $on/off]==], [==[Controls if when the specified $item-link is added]==], [==[$item-link]==],[==[$on/off]==])
	parseCommand("forge item set property adder", [==[Syntax: .forge item set property adder $item-link $on/off]==], [==[Controls if when the specified $item-link is added]==], [==[$item-link]==],[==[$on/off]==])
	parseCommand("forge item set property info", [==[Syntax: .forge item set property info $item-link $on/off]==], [==[Controls if the information for the specified $item-link can be seen by other players. Other players cannot see the whitelist details.]==], [==[$item-link]==],[==[$on/off]==])
	parseCommand("forge item set property lookup", [==[Syntax: .forge item set property lookup $item-link $on/off]==], [==[Controls if the specified $item-link can be looked up by others in .lookup item and .lookup itemforge. You will always be able to see the item in the lookup results.]==], [==[$item-link]==],[==[$on/off]==])
	parseCommand("forge item info", [==[Syntax: .forge item info $item-link]==], [==[Displays information about the specified $item-link including with attributes it has and]==], [==[$item-link]==])
	parseCommand("forge item set whitelist", [==[]==], [==[Commandset to control who is able to add the item given that the permissions have the whitelist type in question enabled.]==], nil)
	parseCommand("forge item set whitelist character", [==[]==], [==[Commandset to control which characters are able to add your item.]==], nil)
	parseCommand("forge item set whitelist officer", [==[]==], [==[Commandset to control which players are able to add your items based on if they're an officer of a particular phase.]==], nil)
	parseCommand("forge item set whitelist member", [==[]==], [==[Commandset to control which players are able to add your items based on if they're a member of a particular phase.]==], nil)
	parseCommand("forge item set whitelist character add", [==[Syntax: .forge item set whitelist character add $item-link $charactername]==], [==[Add the given $character to the characters whitelist. Characters in this list can .additem the specified $item-link.]==], [==[$item-link]==],[==[$charactername]==])
	parseCommand("forge item set whitelist character remove", [==[Syntax: .forge item set whitelist character remove $item-link $charactername]==], [==[Removes the given $character from the character whitelist. This does not affect items already added by this character.]==], [==[$item-link]==],[==[$charactername]==])
	parseCommand("forge item set whitelist officer add", [==[Syntax: .forge item set whitelist officer add $item-link $phaseid]==], [==[Adds the given $phaseid to the phase officer whitelist. Officers of these phases can .additem the specified $item-link.]==], [==[$item-link]==],[==[$phaseid]==])
	parseCommand("forge item set whitelist officer remove", [==[Syntax: .forge item set whitelist officer remove $item-link $phaseid]==], [==[Removes the given $phaseid from the phase officer whitelist for the specified $item-link.. This does not affect items already added by these people.]==], [==[$item-link]==],[==[$phaseid]==])
	parseCommand("forge item set whitelist member add", [==[Syntax: .forge item set whitelist member add $item-link $phaseid]==], [==[Adds the given $phaseid to the phase member whitelist. Members of these phases can .additem the specified $item-link.]==], [==[$item-link]==],[==[$phaseid]==])
	parseCommand("forge item set whitelist member remove", [==[Syntax: .forge item set whitelist member remove $item-link $phaseid]==], [==[Removes the given $phaseid from the phase member whitelist for the specified $item-link. This does not affect items already added by these people.]==], [==[$item-link]==],[==[$phaseid]==])
	parseCommand("lookup itemforge", [==[Syntax: .lookup itemforge $item_part1 item_part2 item_part3 ...]==], [==[Looks up an item forge item containing the word provided in $item_part (granted that it is yours or is available to be searched). You may use as many lookup strings as you wish in any order (e.g. ".lookup itemforge vrykul -bow of" will find you all items of slot bow with the words "vrykul" and "of" in them). You may provide an inventory slot name to limit the search to a specific inventory slot. They must all be prefixed with a dash ("-"). Accepted inventory slots:, head | neck | shoulder | shirt | chest | waist | legs | feet | wrists | hands | finger | trinket | weapon | shield | bow | back | two-handed | bag | tabard | robe | main-hand | off-hand | tome | ammo | thrown | gun | relic.]==], [==[$item_part1]==],[==[...]==])
	parseCommand("forge item request", [==[Syntax: .forge item request $item-link]==], [==[Requests the hotfix data for the given $item-link (or item id)]==], [==[$item-link]==])
	parseCommand("lookup tiletexture", [==[Syntax: .lookup tiletexture $name]==], [==[Looks up texture $name and displays any matching results and its texture_id. The more transparent a texture is]==], [==[$name]==])
	parseCommand("phase shift texture map list", [==[Syntax: .phase shift texture map list [$name]]==], [==[Lists all shifted textures of your current phase in your current map. Use .phase shift texture list next to browse a selection greater than 50.]==], [==[[$name]]==])
	parseCommand("phase shift texture map list next", [==[]==], [==[Displays the next 50 results of .phase shift texture list.]==], nil)
	parseCommand("phase shift detaildoodad", [==[]==], [==[]==], nil)
	parseCommand("lookup detaildoodad", [==[Syntax: .lookup detaildoodad $name]==], [==[Looks up detail doodad $name and displays any matching results and their detail_id. Used for .phase shift detaildoodad.]==], [==[$name]==])
	parseCommand("phase shift detaildoodad list", [==[Syntax: .phase shift detaildoodad list [$name]]==], [==[Lists all shifted detail doodads of your current phase in your current map. Use .phase shift detaildoodad list next to browse a selection greater than 50.]==], [==[[$name]]==])
	parseCommand("phase shift detaildoodad list next", [==[Syntax: .phase shift detaildoodad list next]==], [==[Displays the next 50 results of .phase shift detaildoodad list.]==], nil)
	parseCommand("phase shift detaildoodad map", [==[Syntax: .phase shift detaildoodad #detail_id #replace_detail_id]==], [==[Replaces all detail doodads of Detail ID #detail_id with #replace_detail_id. If -1 is supplied in #replace_detail_id]==], [==[#detail_id]==],[==[#replace_detail_id]==])
	parseCommand("phase shift texture map", [==[]==], [==[]==], nil)
	parseCommand("phase shift texture map diffuse", [==[Syntax: .phase shift texture map diffuse #texture_id #replace_texture_id]==], [==[Replaces all #old_texture_id diffuse textures on the map with #new_texture_id. #old_texture_id must always be the original texture id. Texture ids can be found by utilizing .world adt texinfo diffuse]==], [==[#texture_id]==],[==[#replace_texture_id]==])
	parseCommand("phase shift texture map height", [==[Syntax: .phase shift texture map height #texture_id nreplace_texture_id]==], [==[Replaces all #old_texture_id height textures on the map with #new_texture_id. #old_texture_id must always be the original texture id. Texture ids can be found by utilizing .world adt texinfo height]==], [==[#texture_id]==],[==[nreplace_texture_id]==])
	parseCommand("world", [==[]==], [==[]==], nil)
	parseCommand("world adt", [==[]==], [==[]==], nil)
	parseCommand("world adt texinfo", [==[]==], [==[]==], nil)
	parseCommand("world adt texinfo diffuse", [==[Syntax: .phase shift texinfo diffuse]==], [==[Displays all diffuse textures on the current ADT]==], nil)
	parseCommand("world adt texinfo height", [==[Syntax: .phase shift texinfo height]==], [==[Displays all height textures on the current ADT]==], nil)
	parseCommand("world adt detailinfo", [==[Syntax: .phase shift detailinfo]==], [==[Displays all detail doodads on the current ADT]==], nil)
	parseCommand("gobject tint", [==[Syntax: .gobject tint #r #g #b #t]==], [==[Sets the gameobject to have tint #r]==], [==[#r]==],[==[#g]==],[==[#b]==],[==[#t]==])
	parseCommand("gobject group tint", [==[Syntax: .gobject group tint #r #g #b #t]==], [==[Sets all gameobjects in the group to have tint #r]==], [==[#r]==],[==[#g]==],[==[#b]==],[==[#t]==])
	parseCommand("forge", [==[]==], [==[Type .forge to see the list of possible subcommands or .help phase $subcommand to see info on subcommands.]==], nil)
	parseCommand("forge item set type", [==[Syntax: .forge item set type $item-link $type]==], [==[Sets the item classification of the specified $item-link. 2 is for weapons]==], [==[$item-link]==],[==[$type]==])
	parseCommand("forge item set subtype", [==[Syntax: .forge item set subtype $item-link $subtype]==], [==[Sets the item sub-classification of the specified $item-link. You will find it beneficial to review https://wow.gamepedia.com/ItemType for more details.]==], [==[$item-link]==],[==[$subtype]==])
	parseCommand("forge item set slot", [==[Syntax: .forge item set slot $item-link $slot]==], [==[Sets the equip slot of the specified $item-link. This only works on equippable items (classes 2 or 4). You will find it beneficial to review https://wow.gamepedia.com/Enum.InventoryType for more details.]==], [==[$item-link]==],[==[$slot]==])
	parseCommand("phase reset skybox all", [==[Syntax: .phase reset skybox all $CONFIRM]==], [==[Resets all skyboxes on all maps in the phase. Should be used only as a last resort.]==], [==[CONFIRM]==])
	parseCommand("gobject group spell", [==[Syntax: .gobject group spell #spell]==], [==[Accepts spell links. Sets all gameobjects in the group to constantly have the effect of the given spell on them.]==], [==[#spell]==])
	parseCommand("gobject mass scale", [==[Syntax: .gobject mass scale #scale #entry #radius]==], [==[Changes the scale all gobjects matching entry #search to #scale. Max scale 50. No lower or equal to 0. If #entry is -1]==], [==[#scale]==],[==[#entry]==],[==[#radius]==])
	parseCommand("gobject mass tint", [==[Syntax: .gobject mass tint #r #g #b #t #entry #radius]==], [==[Changes the tint all gobjects matching entry #search to #r]==], [==[#r]==],[==[#g]==],[==[#b]==],[==[#t]==],[==[#entry]==],[==[#radius]==])
	parseCommand("gobject group activate", [==[Syntax: .gobject group activate [#guid [$permanent]]]==], [==[Activates all gobjects in the selected gobject group like a door or a button. Accepts an optional #guid. Accepts \"permanent\" as an argument to make the activation persist through restarts.]==], [==[[#guid]==],[==[[$permanent]]]==])
	parseCommand("gobject group visibility", [==[Syntax: .gobject group visibility #sight_range]==], [==[Sets all gobjects in the selected gobject group to only be visible from #sight_range yards away. Max 533. Insert -1 to force a 'permanent' visibility of 3000.]==], [==[#sight_range]==])
	parseCommand("gobject group unselect", [==[]==], [==[Deselects the currently highlighted gobject group.]==], nil)
	parseCommand("phase forge npc outfit add", [==[]==], [==[Adds a new blank outfit to the selected creature.]==], nil)
	parseCommand("phase forge npc outfit copy", [==[]==], [==[Copies the outfit used by the selected creature into a new outfit.]==], nil)
	parseCommand("phase forge npc outfit remove", [==[Syntax: .phase forge npc outfit remove #outfit]==], [==[Removes the specified outfit id from the selected creature.]==], [==[#outfit]==])
	parseCommand("phase forge npc outfit list", [==[]==], [==[Lists all of the available outfits that the creature can have in its displays list.]==], nil)
	parseCommand("lookup tile", [==[Syntax: .lookup tile $tilename]==], [==[Looks up a building tile gameobject by $objname]==], [==[$tilename]==])
	parseCommand("lookup plane", [==[Syntax: .lookup plane $planename]==], [==[Looks up a plane tile gameobject by $objname]==], [==[$planename]==])
	parseCommand("toggle splitlookupobjects", [==[Syntax: .toggle splitlookupobjects [on/off]]==], [==[Toggles lookup object splitting to not show building tiles or planes on or off. Can accept on/off if you want to specifically turn it on or off.]==], [==[[on/off]]==])
	parseCommand("phase shift area", [==[]==], [==[Commandset to interface overriding properties about an area in your phase.]==], nil)
	parseCommand("phase shift area list", [==[Syntax: .phase shift area list [$name]]==], [==[Lists all area overrides of your current phase. Filterable by optional parameter $name.]==], [==[[$name]]==])
	parseCommand("phase shift area list next", [==[]==], [==[Displays the next 50 results of .phase shift area list.]==], nil)
	parseCommand("phase shift area name", [==[Syntax: .phase shift area name $name]==], [==[Changes the name of the area you currently inhabit to $name.]==], [==[$name]==])
	parseCommand("phase shift area ambience", [==[Syntax: .phase shift area ambience #ambienceId]==], [==[Changes the ambience the area you currently inhabit uses to #ambienceId. Use .lookup ambience $name to get a list of acceptable ids. Use -1 to reset to the areas default id.]==], [==[#ambienceId]==])
	parseCommand("phase shift area music", [==[Syntax: .phase shift area music #musicId [#musicId2]]==], [==[Changes the music the area you currently inhabit uses to #musicId. Use .lookup music $name to get a list of acceptable ids. Use -1 to reset to the areas default id. Alternatively]==], [==[#musicId]==],[==[[#musicId2]]==])
	parseCommand("phase shift area intro", [==[Syntax: .phase shift area intro #introId]==], [==[Changes the intro sound the area you currently inhabit uses to #introId. Use .lookup intromusic $name to get a list of acceptable ids. Use -1 to reset to the areas default id.]==], [==[#introId]==])
	parseCommand("phase shift area remove", [==[Syntax: .phase shift area remove]==], [==[Removes all overrides the area you currently inhabit uses (name]==], nil)
	parseCommand("phase shift zone", [==[]==], [==[Commandset to interface overriding properties about a zone in your phase.]==], nil)
	parseCommand("phase shift zone list", [==[Syntax: .phase shift zone list [$name]]==], [==[Lists all area overrides of your current phase. Filterable by optional parameter $name.]==], [==[[$name]]==])
	parseCommand("phase shift zone list next", [==[]==], [==[Displays the next 50 results of .phase shift zone list.]==], nil)
	parseCommand("phase shift zone name", [==[Syntax: .phase shift zone name $name]==], [==[Changes the name of the zone you currently inhabit to $name.]==], [==[$name]==])
	parseCommand("phase shift zone ambience", [==[Syntax: .phase shift zone ambience #ambienceId]==], [==[Changes the ambience the zone you currently inhabit uses to #ambienceId. Use .lookup ambience $name to get a list of acceptable ids. Use -1 to reset to the zones default id.]==], [==[#ambienceId]==])
	parseCommand("phase shift zone music", [==[Syntax: .phase shift zone music #musicId [#musicId2]]==], [==[Changes the music the zone you currently inhabit uses to #musicId. Use .lookup music $name to get a list of acceptable ids. Use -1 to reset to the zones default id. Alternatively]==], [==[#musicId]==],[==[[#musicId2]]==])
	parseCommand("phase shift zone intro", [==[Syntax: .phase shift zone intro #introId]==], [==[Changes the intro sound the zone you currently inhabit uses to #introId. Use .lookup intromusic $name to get a list of acceptable ids. Use -1 to reset to the zones default id.]==], [==[#introId]==])
	parseCommand("phase shift zone remove", [==[Syntax: .phase shift zone remove]==], [==[Removes all overrides the zone you currently inhabit uses (name]==], nil)
	parseCommand("lookup ambience", [==[Syntax: .lookup ambience $ambiencename]==], [==[Looks up an ambience id by $ambiencename]==], [==[$ambiencename]==])
	parseCommand("lookup music", [==[Syntax: .lookup music $musicname]==], [==[Looks up a music id by $musicname]==], [==[$musicname]==])
	parseCommand("lookup intromusic", [==[Syntax: .lookup intromusic $intromusicname]==], [==[Looks up an intro music id by $intromusicname]==], [==[$intromusicname]==])
	parseCommand("character pandaren", [==[Syntax: .character pandaren $alliance/horde]==], [==[Sets your faction to alliance pandren or horde pandaren as specified. Can only be used by neutral pandaren.]==], [==[$alliance/horde]==])
	parseCommand("phase shift wmo", [==[]==], [==[Commandset to interface overriding properties about WMOs in your phase.]==], nil)
	parseCommand("phase shift wmo list", [==[Syntax: .phase shift wmo list [$name]]==], [==[Lists all WMO overrides of your current phase. Filterable by optional parameter $name.]==], [==[[$name]]==])
	parseCommand("phase shift wmo list next", [==[]==], [==[Displays the next 50 results of .phase shift wmo list.]==], nil)
	parseCommand("phase shift wmo sub", [==[]==], [==[Commandset to interface overriding properties about a sub WMO in your phase.]==], nil)
	parseCommand("phase shift wmo sub name", [==[Syntax: .phase shift wmo sub name $name]==], [==[Changes the name of the sub WMO you currently inhabit to $name. Specifying a name of !BLANK! will cause the game to defer to the WMO root name instead.]==], [==[$name]==])
	parseCommand("phase shift wmo sub ambience", [==[Syntax: .phase shift wmo sub ambience #ambienceId]==], [==[Changes the ambience the sub WMO you currently inhabit uses to #ambienceId. Use .lookup ambience $name to get a list of acceptable ids. Use -1 to reset to the sub WMOs default id.]==], [==[#ambienceId]==])
	parseCommand("phase shift wmo sub music", [==[Syntax: .phase shift wmo sub music #musicId [#musicId2]]==], [==[Changes the music the sub WMO you currently inhabit uses to #musicId. Use .lookup music $name to get a list of acceptable ids. Use -1 to reset to the sub WMOs default id. Alternatively]==], [==[#musicId]==],[==[[#musicId2]]==])
	parseCommand("phase shift wmo sub intro", [==[Syntax: .phase shift wmo sub intro #introId]==], [==[Changes the intro sound the sub WMO you currently inhabit uses to #introId. Use .lookup intromusic $name to get a list of acceptable ids. Use -1 to reset to the sub WMOs default id.]==], [==[#introId]==])
	parseCommand("phase shift wmo sub remove", [==[Syntax: .phase shift wmo sub remove]==], [==[Removes all overrides the sub WMO you currently inhabit uses (name]==], nil)
	parseCommand("phase shift wmo root", [==[]==], [==[Commandset to interface overriding properties about the root WMO in your phase.]==], nil)
	parseCommand("phase shift wmo root name", [==[Syntax: .phase shift wmo root name $name]==], [==[Changes the name of the root WMO you currently inhabit to $name. Specifying a name of !BLANK! will cause the game to defer to the zone or area name instead.]==], [==[$name]==])
	parseCommand("phase shift wmo root ambience", [==[Syntax: .phase shift wmo root ambience #ambienceId]==], [==[Changes the ambience the root WMO you currently inhabit uses to #ambienceId. Use .lookup ambience $name to get a list of acceptable ids. Use -1 to reset to the root WMOs default id.]==], [==[#ambienceId]==])
	parseCommand("phase shift wmo root music", [==[Syntax: .phase shift wmo root music #musicId [#musicId2]]==], [==[Changes the music the root WMO you currently inhabit uses to #musicId. Use .lookup music $name to get a list of acceptable ids. Use -1 to reset to the root WMOs default id. Alternatively]==], [==[#musicId]==],[==[[#musicId2]]==])
	parseCommand("phase shift wmo root intro", [==[Syntax: .phase shift wmo root intro #introId]==], [==[Changes the intro sound the root WMO you currently inhabit uses to #introId. Use .lookup intromusic $name to get a list of acceptable ids. Use -1 to reset to the root WMOs default id.]==], [==[#introId]==])
	parseCommand("phase shift wmo root remove", [==[Syntax: .phase shift wmo root remove]==], [==[Removes all overrides the root WMO you currently inhabit uses (name]==], nil)
	parseCommand("phase shift wmo manual", [==[]==], [==[Commandset to interface overriding properties about a WMO manually in your phase. .lookup wmo or browsing WMOAreaTable on wow.tools is required.]==], nil)
	parseCommand("phase shift wmo manual name", [==[Syntax: .phase shift wmo manual name #wmoId #nameId #groupId $name]==], [==[Changes the name of the manual WMO (specified by #wmoId #nameId #groupId) to $name. Specifying a name of !BLANK! will cause the game to defer to the zone or area name instead. Details about #wmoId]==], [==[#wmoId]==],[==[#nameId]==],[==[#groupId]==],[==[$name]==])
	parseCommand("phase shift wmo manual ambience", [==[Syntax: .phase shift wmo manual ambience #wmoId #nameId #groupId #ambienceId]==], [==[Changes the ambience the manual WMO (specified by #wmoId #nameId #groupId) uses to #ambienceId. Use .lookup ambience $name to get a list of acceptable ids. Use -1 to reset to the manual WMOs default id. Details about #wmoId]==], [==[#wmoId]==],[==[#nameId]==],[==[#groupId]==],[==[#ambienceId]==])
	parseCommand("phase shift wmo manual music", [==[Syntax: .phase shift wmo manual music #wmoId #nameId #groupId #musicId [#musicID2]]==], [==[Changes the music the manual WMO (specified by #wmoId #nameId #groupId) uses to #musicId. Use .lookup music $name to get a list of acceptable ids. Use -1 to reset to the manual WMOs default id. Alternatively]==], [==[#wmoId]==],[==[#nameId]==],[==[#groupId]==],[==[#musicId]==],[==[[#musicID2]]==])
	parseCommand("phase shift wmo manual intro", [==[Syntax: .phase shift wmo manual intro #wmoId #nameId #groupId #introId]==], [==[Changes the intro sound the manual WMO (specified by #wmoId #nameId #groupId) uses to #introId. Use .lookup intromusic $name to get a list of acceptable ids. Use -1 to reset to the manual WMOs default id. Details about #wmoId]==], [==[#wmoId]==],[==[#nameId]==],[==[#groupId]==],[==[#introId]==])
	parseCommand("phase shift wmo manual remove", [==[Syntax: .phase shift wmo manual remove #wmoId #nameId #groupId]==], [==[Removes all overrides the manual WMO (specified by #wmoId #nameId #groupId) uses (name]==], [==[#wmoId]==],[==[#nameId]==],[==[#groupId]==])
	parseCommand("lookup wmodata", [==[Syntax: .lookup wmodata $wmoName]==], [==[Looks up corresponding rootId]==], [==[$wmoName]==])
	parseCommand("phase shift water", [==[]==], [==[]==], nil)
	parseCommand("phase shift water map", [==[Syntax: .phase shift water map $on/$off]==], [==[Turns water on or off map-wide.]==], [==[$on/$off]==])
	parseCommand("phase shift mccv", [==[]==], [==[]==], nil)
	parseCommand("phase shift mccv map", [==[Syntax: .phase shift mccv map $on/$off]==], [==[Turns MCCV shading on or off map-wide. MCCV lights (vertex shading) are usually very black stains on the terrain]==], [==[$on/$off]==])
	parseCommand("phase shift water adt", [==[Syntax: .phase shift water adt $on/$off]==], [==[Turns water on or off on the current ADT.]==], [==[$on/$off]==])
	parseCommand("phase shift mccv adt", [==[Syntax: .phase shift mccv adt $on/$off]==], [==[Turns MCCV shading on or off on the current ADT. MCCV lights (vertex shading) are usually very black stains on the terrain]==], [==[$on/$off]==])
	parseCommand("phase shift water reset", [==[Syntax: .phase shift water reset $CONFIRM]==], [==[Restores all water shifts on the current map. Must type CONFIRM as first argument.]==], [==[$CONFIRM]==])
	parseCommand("phase shift mccv reset", [==[Syntax: .phase shift mccv reset $CONFIRM]==], [==[Restores all vertex shade shifts on the current map. Must type CONFIRM as first argument.]==], [==[$CONFIRM]==])
	parseCommand("cheat slowcast", [==[Syntax: .cheat slowcast [on/off]]==], [==[All spells cast by the player will take a very long time to cast.]==], [==[[on/off]]==])
	parseCommand("command", [==[]==], [==[Commandset to change how to interface with commands in chat]==], nil)
	parseCommand("command channel", [==[Syntax: .command channel $command $channel]==], [==[Changes the output of the given $command category to $channel. Use "reset" in lieu of $channel to revert to System Messages. $command can be announce, gobject_group, gobject_mass, gps, group, guild, help, learn, list, lookup, misc, modify, npc, pet, phase, phase_forge_npc, phase_forge_npc_displays, phase_forge_npc_outfit, phase_forge_npc_outfit, phase_shift, phase_shift_area, phase_shift_wmo, reset, send, server, tele, titles, waypoints, world\n$channel can be guild_announce, achievement_announce, blizzard_whisper, experience, honor, reputation, skill-ups, tradeskills, opening, pet_info, misc_info, battleground_horde, battleground_alliance, battleground_neutral, target_icons, blizzard_services_alerts]==], [==[$command]==],[==[$channel]==])
	parseCommand("command settings", [==[Syntax: .command settings]==], [==[Shows currently active channel mappings as done by channel command]==], nil)
	parseCommand("phase shift area skybox", [==[Syntax: .phase shift area skybox #skyboxId]==], [==[Applies the skybox spell #skyboxId to the area you currently inhabit. Can be a spell link. Use .lookup spell skybox to get a list of acceptable spells. Use 0 to have no skybox spell but remove skybox spells when the player enters]==], [==[#skyboxId]==])
	parseCommand("phase shift zone skybox", [==[Syntax: .phase shift zone skybox #skyboxId]==], [==[Applies the skybox spell #skyboxId to the zone you currently inhabit. Can be a spell link. Use .lookup spell skybox to get a list of acceptable spells. Use 0 to have no skybox spell but remove skybox spells when the player enters]==], [==[#skyboxId]==])
	parseCommand("phase forge npc outfit class", [==[Syntax: .phase forge npc outfit class #classid]==], [==[Sets the class of the forged NPC. 1: Not Death-Knight / 6: Death-Knight / 10: Monk (Other classes probably have no meaningful impact)]==], [==[#classid]==])
	parseCommand("phase clearaura", [==[Syntax: .phase clearaura #spellid]==], [==[Removes auras associated with the given #spellId from all creatures on the map]==], [==[#spellid]==])
	parseCommand("phase set skybox id", [==[Syntax: .phase set skybox id #originalskybox #newskybox]==], [==[Replaces the given #originalskybox with #newskybox. A full list can be found in the Phase Manager or in the forums.]==], [==[#originalskybox]==],[==[#newskybox]==])
	parseCommand("phase shift map", [==[Syntax: .phase shift map #targetMapId]==], [==[Superimposes the given targetMapId (found from .lookup map) onto the map you are currently on. If the targetMapId is already swapped in]==], [==[#targetMapId]==])
	parseCommand("gobject overlay", [==[Syntax: .gobject overlay #r #g #b [#s] [#t]]==], [==[Sets the gameobject to have overlay #r]==], [==[#r]==],[==[#g]==],[==[#b]==],[==[[#s]]==],[==[[#t]]==])
	parseCommand("gobject group overlay", [==[Syntax: .gobject group overlay #r #g #b [#s] [#t]]==], [==[Sets all gameobjects in the group to have overlay #r]==], [==[#r]==],[==[#g]==],[==[#b]==],[==[[#s]]==],[==[[#t]]==])
	parseCommand("gobject mass overlay", [==[Syntax: .gobject mass overlay #r #g #b [#s] [#t] #entry #radius]==], [==[Changes the overlay all gobjects matching entry #search to #r]==], [==[#r]==],[==[#g]==],[==[#b]==],[==[[#s]]==],[==[[#t]]==],[==[#entry]==],[==[#radius]==])
	parseCommand("gobject move here", [==[Syntax: .gobject move here [#guid]]==], [==[Moves selected gameobject]==], [==[[#guid]]==])
	parseCommand("gobject move coords", [==[Syntax: .gobject move coords [#guid] %x %y %z]==], [==[Moves selected gameobject]==], [==[[#guid]]==],[==[%x]==],[==[%y]==],[==[%z]==])
	parseCommand("gobject group move here", [==[Syntax: .gobject group move here [#leaderguid]]==], [==[Moves selected gameobject group]==], [==[[#leaderguid]]==])
	parseCommand("gobject group move coords", [==[Syntax: .gobject group move coords [#leaderguid] %x %y %z]==], [==[Moves selected gameobject group]==], [==[[#leaderguid]]==],[==[%x]==],[==[%y]==],[==[%z]==])
	parseCommand("gobject move", [==[Syntax: .gobject move [#guid] {[$direction] %[value]} ...]==], [==[Moves selected gameobject]==], [==[[#guid]]==],[==[{[$direction]]==],[==[[#distance]}]==],[==[...]==])
	parseCommand("gobject group move", [==[Syntax: .gobject group move [#guid] { [$direction] [%value] }]==], [==[Moves selected gameobject group]==], [==[[#guid]]==],[==[{[$direction]]==],[==[[#distance]}]==],[==[...]==])
	parseCommand("gobject near", [==[Syntax: .gobject near [#distance] [$name/entry]]==], [==[Output gameobjects at distance #distance from player. Output gameobject guids and coordinates sorted by distance from character. If #distance not provided use 10 as default value. If [$name/entry] is specified]==], [==[[#distance]]==],[==[[$name/entry]]==])
	parseCommand("gobject mass groupclear", [==[Syntax: .gobject mass groupclear #entry #radius]==], [==[Clears out groups for any leader gobjects matching entry #search within #radius. Max radius 500. If #entry is -1]==], [==[#entry]==],[==[#radius]==])
	parseCommand("gobject group merge", [==[Syntax: .gobject group merge #leaderguid]==], [==[Merges the selected gobject group with the specified leader gameobject GUID.]==], [==[#leaderguid]==])
	parseCommand("waypoints random", [==[Syntax: .waypoints random [#distance]]==], [==[Makes the selected creature have random movement up to %distance yards from their spawn point. If %distance is 0 or unspecified]==], [==[[#distance]]==])
	parseCommand("phase set lightning", [==[Syntax: .phase set lightning $lightningStormId [$area/zone] [$permanent]]==], [==[Applies the provided |cff00CCFFlightningStormId|r to the zone you are in]==], [==[$lightningStormId]==],[==[[$area/zone]]==],[==[[$permanent]]==])
	parseCommand("phase shift lightning", [==[]==], [==[Commandset that allows editing of lightning storm behaviour via the hotfix system.]==], nil)
	parseCommand("phase shift lightning new", [==[]==], [==[Creates a new lightning storm ID for your phase with some default properties to get you started.]==], nil)
	parseCommand("phase shift lightning set", [==[]==], [==[Commandset to edit properties about an existing lightning storm ID. Note that the behaviour of these attributes is NOT well documented.]==], nil)
	parseCommand("phase shift lightning list", [==[]==], [==[Lists all lightning storm IDs associated with the phase you are in]==], nil)
	parseCommand("phase shift lightning list next", [==[]==], [==[Lists the next 50 lightning storm IDs associated with the phase you are in]==], nil)
	parseCommand("phase shift lightning delete", [==[Syntax: .phase shift lightning delete $lightningStormId]==], [==[Permanently deletes provided |cff00CCFFlightningStormId|r in the phase you are in.]==], [==[$lightningStormId]==])
	parseCommand("phase shift lightning info", [==[Syntax: .phase shift lightning info $lightningStormId]==], [==[Displays all attributes available with the set command for the provided |cff00CCFFlightningStormId|r.]==], [==[$lightningStormId]==])
	parseCommand("phase shift lightning set boltcolour", [==[Syntax: .phase shift lightning set boltcolour $lightningStormId [$pct/dec] #red #green #blue]==], [==[Sets the lightning bolt colour for the given |cff00CCFFlightningStormId|r as a percentage. If $|cffADFFFFpct/dec|r contains the text 'dec']==], [==[$lightningStormId]==],[==[[$pct/dec]]==],[==[#red]==],[==[#green]==],[==[#blue]==])
	parseCommand("phase shift lightning set brightness", [==[Syntax: .phase shift lightning set brightness $lightningStormId %overall [%ground] [%bolt] [%cloud]]==], [==[Sets the brightness of the lightning for the given |cff00CCFFlightningStormId|r. |cffADFFFFground|r]==], [==[$lightningStormId]==],[==[%overall]==],[==[[%ground]]==],[==[[%bolt]]==],[==[[%cloud]]==])
	parseCommand("phase shift lightning set clouddepth", [==[Syntax: .phase shift lightning set clouddepth $lightningStormId %min %max]==], [==[Sets the cloud depth of the lightning for the given |cff00CCFFlightningStormId|r to choose randomly between |cff00CCFFmin|r and |cff00CCFFmax|r. Unknown what this does.]==], [==[$lightningStormId]==],[==[%min]==],[==[%max]==])
	parseCommand("phase shift lightning set convergence", [==[Syntax: .phase shift lightning set convergence $lightningStormId %min %max]==], [==[Sets the convergence speed of the lightning for the given |cff00CCFFlightningStormId|r to choose randomly between |cff00CCFFmin|r and |cff00CCFFmax|r. Controls how strongly drawn towards the horizon the leaders are.]==], [==[$lightningStormId]==],[==[%min]==],[==[%max]==])
	parseCommand("phase shift lightning set direction", [==[Syntax: .phase shift lightning set direction $lightningStormId %NorthSouth %EastWest %Variance]==], [==[Sets the origin direction of the lightning for the given |cff00CCFFlightningStormId|r. |cff00CCFFNorthSouth|r and |cff00CCFFEastWest|r control where the bolt originates from]==], [==[$lightningStormId]==],[==[%NorthSouth]==],[==[%EastWest]==],[==[%Variance]==])
	parseCommand("phase shift lightning set dischargetime", [==[Syntax: .phase shift lightning set dischargetime $lightningStormId %min %max]==], [==[Sets the duration of the discharge for the given |cff00CCFFlightningStormId|r to choose randomly between |cff00CCFFmin|r and |cff00CCFFmax|r seconds. Controls how long it takes for the discharge event to complete]==], [==[$lightningStormId]==],[==[%min]==],[==[%max]==])
	parseCommand("phase shift lightning set divergence", [==[Syntax: .phase shift lightning set divergence $lightningStormId %min %max]==], [==[Sets the divergence factor for the given |cff00CCFFlightningStormId|r to choose randomly between |cff00CCFFmin|r and |cff00CCFFmax|r. Controls how likely the lightning bolt will split into a branch.]==], [==[$lightningStormId]==],[==[%min]==],[==[%max]==])
	parseCommand("phase shift lightning set fadeintensity", [==[Syntax: .phase shift lightning set fadeintensity $lightningStormId %min %max]==], [==[Sets the fade intensity factor for the given |cff00CCFFlightningStormId|r to choose randomly between |cff00CCFFmin|r and |cff00CCFFmax|r. Controls how rapidly the cloud flash brightens up during the discharge.]==], [==[$lightningStormId]==],[==[%min]==],[==[%max]==])
	parseCommand("phase shift lightning set fadeouttime", [==[Syntax: .phase shift lightning set fadeouttime $lightningStormId %min %max]==], [==[Sets the fade out time for the given |cff00CCFFlightningStormId|r to choose randomly between |cff00CCFFmin|r and |cff00CCFFmax|r seconds. Controls how long the lightning bolt and cloud flash remains visible]==], [==[$lightningStormId]==],[==[%min]==],[==[%max]==])
	parseCommand("phase shift lightning set flashcolour", [==[Syntax: .phase shift lightning set flashcolour $lightningStormId [$pct/dec] #red #green #blue]==], [==[Sets the lightning flash colour for the given |cff00CCFFlightningStormId|r as a percentage. If $|cffADFFFFpct/dec|r contains the text 'dec']==], [==[$lightningStormId]==],[==[[$pct/dec]]==],[==[#red]==],[==[#green]==],[==[#blue]==])
	parseCommand("phase shift lightning set formationtime", [==[Syntax: .phase shift lightning set formationtime $lightningStormId %min %max]==], [==[Sets the formation time for the given |cff00CCFFlightningStormId|r to choose randomly between |cff00CCFFmin|r and |cff00CCFFmax|r seconds. Controls how fast the lightning bolt leaders are]==], [==[$lightningStormId]==],[==[%min]==],[==[%max]==])
	parseCommand("phase shift lightning set height", [==[Syntax: .phase shift lightning set height $lightningStormId %min %max]==], [==[Sets the starting height for the given |cff00CCFFlightningStormId|r to choose randomly between |cff00CCFFmin|r and |cff00CCFFmax|r. Controls how far up in the sky the first lightning bolt leader spawns.]==], [==[$lightningStormId]==],[==[%min]==],[==[%max]==])
	parseCommand("phase shift lightning set segment", [==[Syntax: .phase shift lightning set segment $lightningStormId %size #max]==], [==[Sets the segment properties for the given |cff00CCFFlightningStormId|r to a size of |cff00CCFFsize|r and up to a maximum of |cff00CCFFmax|r segments. Controls the branches of the bolt.]==], [==[$lightningStormId]==],[==[%size]==],[==[#max]==])
	parseCommand("phase shift lightning set sounds", [==[Syntax: .phase shift lightning set sounds $lightningStormId #sound1 #sound2 #sound3 [%distance]]==], [==[Sets the sounds to play for the given |cff00CCFFlightningStormId|r. Unknown the priority. |cffADFFFFdistance|r defaults to 0 if not set and should always be audible.]==], [==[$lightningStormId]==],[==[#sound1]==],[==[#sound2]==],[==[#sound3]==],[==[[%distance]]==])
	parseCommand("phase shift lightning set strength", [==[Syntax: .phase shift lightning set strength $lightningStormId %min %max]==], [==[Sets the strength for the given |cff00CCFFlightningStormId|r to choose randomly between |cff00CCFFmin|r and |cff00CCFFmax|r. Controls how powerful the discharge effect is.]==], [==[$lightningStormId]==],[==[%min]==],[==[%max]==])
	parseCommand("phase shift lightning set width", [==[Syntax: .phase shift lightning set width $lightningStormId %min %max]==], [==[Sets the width for the given |cff00CCFFlightningStormId|r to choose randomly between |cff00CCFFmin|r and |cff00CCFFmax|r. Controls how wide the lightning bolt is.]==], [==[$lightningStormId]==],[==[%min]==],[==[%max]==])
	parseCommand("phase shift lightning set intervaltime", [==[Syntax: .phase shift lightning set intervaltime $lightningStormId %min %max]==], [==[Sets the interval time for the given |cff00CCFFlightningStormId|r to choose randomly between |cff00CCFFmin|r and |cff00CCFFmax|r seconds. Controls an additional time span that must be waited between lightning bolts.]==], [==[$lightningStormId]==],[==[%min]==],[==[%max]==])
	parseCommand("phase shift lightning set notes", [==[Syntax: .phase shift lightning set notes $lightningStormId $notes]==], [==[Sets the notes for the given |cff00CCFFlightningStormId|r that displays when you use .phase shift lightning list. Good for remembering what lightning storm Id does what.]==], [==[$lightningStormId]==],[==[$notes]==])
	parseCommand("phase shift weather", [==[]==], [==[Commandset that allows editing of some weather behaviour via the hotfix system.]==], nil)
	parseCommand("phase shift weather wind", [==[Syntax: .phase shift weather wind #weather #wind]==], [==[Sets the |cff00CCFFwind|r id for the given |cff00CCFFweather|r id. Weather can be rain (3]==], [==[#weather]==],[==[#wind]==])
	parseCommand("phase set celestial", [==[Syntax: .phase set celestial $celestialbodyId]==], [==[Applies the provided |cff00CCFFcelestialbodyId|r to the map you are on. Custom variants will be above 100]==], [==[$celestialbodyId]==])
	parseCommand("phase shift celestial", [==[]==], [==[Commandset that allows editing of celestial bodies via the hotfix system.]==], nil)
	parseCommand("phase shift celestial new", [==[Syntax: .phase shift celestial new]==], [==[Creates a new celestial body ID for your phase. It will not start with a texture]==], nil)
	parseCommand("phase shift celestial set", [==[]==], [==[Commandset to edit properties about an existing celestial body ID.]==], nil)
	parseCommand("phase shift celestial list", [==[Syntax: .phase shift celestial list]==], [==[Lists all celestial body IDs associated with the phase you are in]==], nil)
	parseCommand("phase shift celestial list next", [==[Syntax: .phase shift celestial list next]==], [==[Lists the next 50 celestial body IDs associated with the phase you are in]==], nil)
	parseCommand("phase shift celestial delete", [==[Syntax: .phase shift celestial delete $celestialbodyId]==], [==[Permanently deletes provided |cff00CCFFcelestialbodyId|r in the phase you are in.]==], [==[$celestialbodyId]==])
	parseCommand("phase shift celestial info", [==[Syntax: .phase shift celestial info $celestialbodyId]==], [==[Displays all attributes available with the set command for the provided |cff00CCFFcelestialbodyId|r.]==], [==[$celestialbodyId]==])
	parseCommand("phase shift celestial set position", [==[Syntax: .phase shift celestial set position $celestialbodyId %axis1 %axis2 %axis3]==], [==[Sets the position for the given |cff00CCFFcelestialbodyId|r to occupy in the sky. Experiment with the values to find out what they do]==], [==[$celestialbodyId]==],[==[%axis1]==],[==[%axis2]==],[==[%axis3]==])
	parseCommand("phase shift celestial set scale", [==[Syntax: .phase shift celestial set scale $celestialbodyId %scale]==], [==[Sets the base texture scale for the given |cff00CCFFcelestialbodyId|r to use.]==], [==[$celestialbodyId]==],[==[%scale]==])
	parseCommand("phase shift celestial set texture", [==[Syntax: .phase shift celestial set texture $celestialbodyId #fileDataID]==], [==[Sets the base texture to be used by the given |cff00CCFFcelestialbodyId|r.]==], [==[$celestialbodyId]==],[==[#fileDataID]==])
	parseCommand("phase shift celestial set atmosphere", [==[Syntax: .phase shift celestial set atmosphere $property $celestialbodyId ?values]==], [==[Settings for atmosphere attributes for the given |cff00CCFFcelestialbodyId|r]==], [==[$property]==],[==[$celestialbodyId]==],[==[?values]==])
	parseCommand("phase shift celestial set atmosphere mask", [==[Syntax: .phase shift celestial set atmosphere mask $celestialbodyId #fileDataId]==], [==[Sets the atmosphere mask texture for the given |cff00CCFFcelestialbodyId|r to use.]==], [==[$celestialbodyId]==],[==[#fileDataId]==])
	parseCommand("phase shift celestial set atmosphere modified", [==[Syntax: .phase shift celestial set atmosphere modified $celestialbodyId #fileDataId]==], [==[Sets the atmosphere modified texture for the given |cff00CCFFcelestialbodyId|r to use.]==], [==[$celestialbodyId]==],[==[#fileDataId]==])
	parseCommand("phase shift celestial set atmosphere scale", [==[Syntax: .phase shift celestial set atmosphere scale $celestialbodyId %scale]==], [==[Sets the scale for the atmosphere layer to use for the given |cff00CCFFcelestialbodyId|r to use.]==], [==[$celestialbodyId]==],[==[%scale]==])
	parseCommand("phase shift celestial set lightmask", [==[Syntax: .phase shift celestial set lightmask $celestialbodyId #fileDataId]==], [==[Sets the lightmask texture for the given |cff00CCFFcelestialbodyId|r to use.]==], [==[$celestialbodyId]==],[==[#fileDataId]==])
	parseCommand("phase shift celestial set glow", [==[Syntax: .phase shift celestial set glow $property $celestialbodyId ?values]==], [==[Settings for glow attributes for the given |cff00CCFFcelestialbodyId|r.]==], [==[$property]==],[==[$celestialbodyId]==],[==[?values]==])
	parseCommand("phase shift celestial set glow mask", [==[Syntax: .phase shift celestial set glow mask $celestialbodyId #fileDataId1 #fileDataId2]==], [==[Sets the glow pair mask textures for the given |cff00CCFFcelestialbodyId|r to use.]==], [==[$celestialbodyId]==],[==[#fileDataId1]==],[==[#fileDataId2]==])
	parseCommand("phase shift celestial set glow scale", [==[Syntax: .phase shift celestial set glow scale $celestialbodyId %scale1 %scale2]==], [==[Sets the scales for the glow pair textures for the given |cff00CCFFcelestialbodyId|r to use.]==], [==[$celestialbodyId]==],[==[%scale1]==],[==[%scale2]==])
	parseCommand("phase shift celestial set glow modified", [==[Syntax: .phase shift celestial set glow modified $celestialbodyId #fileDataId1 #fileDataId2]==], [==[Sets the glow pair modified textures for the given |cff00CCFFcelestialbodyId|r to use.]==], [==[$celestialbodyId]==],[==[#fileDataId1]==],[==[#fileDataId2]==])
	parseCommand("phase shift celestial set glow scroll", [==[Syntax: .phase shift celestial set glow scroll $celestialbodyId %scroll1 %scroll2 %scroll3 %scroll4]==], [==[Sets the scroll magnitude for the glow pair for the given |cff00CCFFcelestialbodyId|r to use. Scroll1 and 3 will affect the first glow texture]==], [==[$celestialbodyId]==],[==[%scroll1]==],[==[%scroll2]==],[==[%scroll3]==],[==[%scroll4]==])
	parseCommand("phase shift celestial set notes", [==[Syntax: .phase shift celestial set notes $celestialbodyId $notes]==], [==[Sets the notes for the given |cff00CCFFcelestialbodyId|r that displays when you use .phase shift celestial list. Good for remembering what celestial body id is what.]==], [==[$celestialbodyId]==],[==[$notes]==])
	parseCommand("gobject set collision", [==[Syntax: .gobject set collision $on/off]==], [==[Turns off or on the gameobject collision. Not all objects can have their collision disabled in this way.]==], [==[$on/off]==])
	parseCommand("gobject tint", [==[Syntax: .gobject tint #r #g #b [#s] [#t]]==], [==[Sets the gameobject to have tint #|cff00CCFFr|r]==], [==[#r]==],[==[#g]==],[==[#b]==],[==[[#s]]==],[==[[#t]]==])
	parseCommand("gobject group tint", [==[Syntax: .gobject group tint #r #g #b [#s] [#t]]==], [==[Sets all gameobjects in the group to have tint #|cff00CCFFr|r]==], [==[#r]==],[==[#g]==],[==[#b]==],[==[[#s]]==],[==[[#t]]==])
	parseCommand("gobject mass tint", [==[Syntax: .gobject mass tint #r #g #b [#s] [#t] #entry %radius]==], [==[Changes the tint of all gobjects matching entry #|cff00CCFFsearch|r to #|cff00CCFFr|r]==], [==[#r]==],[==[#g]==],[==[#b]==],[==[[#s]]==],[==[[#t]]==],[==[#entry]==],[==[%radius]==])
	parseCommand("npc despawn", [==[Syntax: .npc despawn [#secondsToRespawn=0]]==], [==[Despawns the targetted npc until next server restart. If #|cffADFFFFsecondsToRespawn|r has been provided]==], [==[[#secondsToRespawn=0]]==])
	parseCommand("npc respawn", [==[Syntax: .npc respawn]==], [==[Respawns all nearby NPCs that have been artifically despawned without being deleted. This includes NPCs executed with |cffFD9B06.kill|r]==], nil)
	parseCommand("phase toggle knockback", [==[Syntax: .phase toggle knockback]==], [==[Allows members to use knockback spells.]==], nil)
	parseCommand("phase shift area visibility", [==[Syntax: .phase shift area visibility ultralow/verylow/low/medium/high]==], [==[Sets the distance at which players load objects upon entering the current area.]==], [==[ultralow/verylow/low/medium/high]==])
	parseCommand("phase shift zone visibility", [==[Syntax: .phase shift zone visibility ultralow/verylow/low/medium/high]==], [==[Sets the distance at which players load objects upon entering the current zone. Area settings take priority.]==], [==[ultralow/verylow/low/medium/high]==])
	parseCommand("phase forge npc healthexact", [==[Syntax: .phase forge npc healthexact #health]==], [==[Sets the health of the NPC to |cff00CCFFhealth|r exactly.]==], [==[#health]==])
	parseCommand("phase forge npc displayfaction", [==[Syntax: .phase forge npc displayfaction [$on/off]]==], [==[Sets whether or not an NPC displays their faction. If neither on nor off are passed]==], [==[[$on/off]]==])
	parseCommand("phase forge npc fakeplayer", [==[Syntax: .phase forge npc fakeplayer [$on/off]]==], [==[Sets whether or not an NPC has a blue name. If neither on nor off are passed]==], [==[[$on/off]]==])
	parseCommand("phase forge npc regen", [==[Syntax: .phase forge npc regen [$on/off]]==], [==[Sets whether or not an NPC regenerates their health or can take damage or be healed. If neither on nor off are passed]==], [==[[$on/off]]==])
	parseCommand("npc set health", [==[Syntax: .npc set health #[+/-]health]==], [==[Sets the current health of the selected creature. If + or - is given]==], [==[#[+/-]health]==])
	parseCommand("phase forge npc outfit set", [==[Syntax: .phase forge npc outfit set #outfitId]==], [==[Sets the selected NPC to use the given outfit id]==], [==[#outfitId]==])
	parseCommand("npc walk", [==[Syntax: .npc run $where $[behaviour]]==], [==[Makes the selected NPC walk to either 'here' (your position) or 'there' (position determined by Artillery Strike). If $|cffADFFFFbehaviour|r is 'formation']==], [==[$where]==],[==[$[behaviour]]==])
	parseCommand("npc run", [==[Syntax: .npc walk $where $[behaviour]]==], [==[Makes the selected NPC run to either 'here' (your position) or 'there' (position determined by Artillery Strike). If $|cffADFFFFbehaviour|r is 'formation']==], [==[$where]==],[==[$[behaviour]]==])
	parseCommand("doodad adt", [==[]==], [==[]==], nil)
	parseCommand("doodad adt import", [==[Syntax: .doodad adt import]==], [==[Imports all doodads in the shifted adt you are currently in. Only imports doodads that are not currently imported]==], nil)
	parseCommand("doodad adt unimport", [==[Syntax: .doodad adt unimport]==], [==[Unimports all doodads in the adt you are currently in. It only deletes objects that were created as a result of .doodad mass/adt import.]==], nil)
	parseCommand("phase set textrange", [==[]==], [==[]==], nil)
	parseCommand("phase set textrange say", [==[Syntax: .phase set textrange say %range]==], [==[Sets the listen range for say messages to |cff00CCFF%range|r. Setting to 0 restores server defaults. Cannot exceed 500.]==], [==[%range]==])
	parseCommand("phase set textrange emote", [==[Syntax: .phase set textrange emote %range]==], [==[Sets the listen range for emote messages to |cff00CCFF%range|r. Setting to 0 restores server defaults. Cannot exceed 500.]==], [==[%range]==])
	parseCommand("phase set textrange yell", [==[Syntax: .phase set textrange yell %range]==], [==[Sets the listen range for yell messages to |cff00CCFF%range|r. Setting to 0 restores server defaults. Cannot exceed 500.]==], [==[%range]==])
	parseCommand("spellvisualkit", [==[]==], [==[]==], nil)
	parseCommand("spellvisualkit apply", [==[Syntax: .spellvisualkit apply #SpellVisualKitID [#type] [#duration] [self]]==], [==[Applies the given |cff00CCFF#SpellVisualKitID|r to yourself]==], [==[#SpellVisualKitID]==],[==[[#type]]==],[==[[#duration]]==],[==[[self]]==])
	parseCommand("spellvisualkit remove", [==[Syntax: .spellvisualkit remove #SpellVisualKitID/all [self]]==], [==[Removes the given |cff00CCFF#SpellVisualKitID|r from yourself]==], [==[#SpellVisualKitID/all]==],[==[[self]]==])
	parseCommand("spellvisualkit list", [==[Syntax: .spellvisualkit list [self]]==], [==[Lists all of the currently applied SpellVisualKits on yourself]==], [==[[self]]==])
	parseCommand("phase toggle spellvisualkit", [==[Syntax: .phase toggle spellvisualkit]==], [==[Disables access to the SpellVisualKit command group for non-officers in the phase.]==], nil)
end
runDefs()
